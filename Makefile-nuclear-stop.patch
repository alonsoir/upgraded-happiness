# =============================================================================
# UPGRADED HAPPINESS - Makefile Nuclear Stop Integration
# =============================================================================
# Parche para integrar la parada nuclear efectiva en el Makefile
# Reemplaza el método stop existente con uno que realmente funciona
# =============================================================================

# Variables nuclear stop
NUCLEAR_STOP_SCRIPT := nuclear-stop.sh

# Asegurar que el script nuclear existe y es ejecutable
.PHONY: setup-nuclear-stop
setup-nuclear-stop:
	@echo "🔧 Configurando nuclear stop..."
	@chmod +x $(NUCLEAR_STOP_SCRIPT) 2>/dev/null || echo "⚠️ $(NUCLEAR_STOP_SCRIPT) no encontrado"
	@if [ ! -f $(NUCLEAR_STOP_SCRIPT) ]; then \
		echo "❌ $(NUCLEAR_STOP_SCRIPT) requerido para parada efectiva"; \
		echo "   Descárgalo desde los artifacts del proyecto"; \
		exit 1; \
	fi

# NUEVO: Stop nuclear (realmente efectivo)
.PHONY: stop
stop: setup-nuclear-stop
	@echo "🛑 Ejecutando parada nuclear completa..."
	@./$(NUCLEAR_STOP_SCRIPT)

# Stop tradicional (para fallback si es necesario)
.PHONY: stop-gentle
stop-gentle:
	@echo "🛑 Attempting gentle stop (traditional method)..."
	@echo "⚠️  Nota: Este método puede no funcionar con procesos root"
	-@pkill -f smart_broker 2>/dev/null || true
	-@pkill -f lightweight_ml_detector 2>/dev/null || true
	-@pkill -f promiscuous_agent 2>/dev/null || true
	-@pkill -f uvicorn 2>/dev/null || true
	@echo "✅ Gentle stop completed (puede que necesites usar 'make stop' para limpieza completa)"

# Stop de emergencia (máximo nivel)
.PHONY: emergency-stop
emergency-stop:
	@echo "🚨 EMERGENCY STOP - Máxima agresividad"
	@sudo pkill -9 -f "python.*promiscuous" 2>/dev/null || true
	@sudo pkill -9 -f "python.*broker" 2>/dev/null || true
	@sudo pkill -9 -f "python.*detector" 2>/dev/null || true
	@sudo pkill -9 -f "uvicorn" 2>/dev/null || true
	@sudo lsof -ti :5555,5556,8766,8080 | xargs sudo kill -9 2>/dev/null || true
	@sudo rm -f *.pid /tmp/*scada* /tmp/*broker* /tmp/*zmq* 2>/dev/null || true
	@echo "💀 Emergency stop completed"

# Verificar que todo esté realmente parado
.PHONY: verify-stop
verify-stop:
	@echo "🔍 Verificando estado de parada..."
	@echo "Procesos SCADA activos:"
	@ps aux | grep -E "(smart_broker|ml_detector|promiscuous_agent|uvicorn)" | grep -v grep || echo "✅ Sin procesos SCADA activos"
	@echo ""
	@echo "Puertos SCADA ocupados:"
	@lsof -i :5555,5556,8766,8080 2>/dev/null || echo "✅ Todos los puertos SCADA libres"
	@echo ""
	@echo "Archivos PID restantes:"
	@find . -name "*.pid" 2>/dev/null || echo "✅ Sin archivos PID"

# Status mejorado que incluye verificación post-stop
.PHONY: status-complete
status-complete:
	@echo "📊 Estado completo del sistema SCADA..."
	@echo ""
	@echo "=== PROCESOS ==="
	@ps aux | grep -E "(smart_broker|ml_detector|promiscuous_agent|uvicorn)" | grep -v grep || echo "Sin procesos SCADA"
	@echo ""
	@echo "=== PUERTOS ==="
	@echo "Puerto 5555 (ZeroMQ Broker):"
	@lsof -i :5555 2>/dev/null || echo "  Libre ✅"
	@echo "Puerto 5556 (ZeroMQ Dashboard):"
	@lsof -i :5556 2>/dev/null || echo "  Libre ✅"
	@echo "Puerto 8766 (Dashboard Web):"
	@lsof -i :8766 2>/dev/null || echo "  Libre ✅"
	@echo ""
	@echo "=== ARCHIVOS ==="
	@echo "Archivos PID:"
	@find . -name "*.pid" 2>/dev/null | head -5 || echo "  Ninguno ✅"
	@echo "Archivos de configuración:"
	@ls -la upgraded-happiness-bitdefender/bitdefender_config.yaml 2>/dev/null || echo "  No encontrado ⚠️"
	@ls -la dashboard_server_with_real_data.py 2>/dev/null || echo "  No encontrado ⚠️"

# Reinicio completo usando parada nuclear
.PHONY: restart-nuclear
restart-nuclear: stop
	@echo "🔄 Esperando 3 segundos para estabilización..."
	@sleep 3
	@echo "🚀 Iniciando sistema limpio..."
	$(MAKE) quick-start

# Restart con verificación completa
.PHONY: restart-verified
restart-verified: stop verify-stop
	@echo "🔄 Sistema verificado como parado, iniciando..."
	@sleep 2
	$(MAKE) quick-start
	@sleep 5
	$(MAKE) status-complete

# Comando de mantenimiento completo
.PHONY: maintenance-cycle
maintenance-cycle:
	@echo "🔧 Ejecutando ciclo de mantenimiento completo..."
	$(MAKE) stop
	$(MAKE) verify-stop
	@echo "🧹 Limpiando dependencias..."
	$(MAKE) fix-deps 2>/dev/null || true
	@echo "🚀 Reiniciando sistema..."
	$(MAKE) quick-start
	@sleep 8
	$(MAKE) status-complete
	@echo "✅ Ciclo de mantenimiento completado"

# Help actualizado
.PHONY: help-nuclear
help-nuclear:
	@echo ""
	@echo "🛑 COMANDOS DE PARADA MEJORADOS:"
	@echo "  stop              - Parada nuclear completa (RECOMENDADO)"
	@echo "  stop-gentle       - Parada tradicional (puede fallar con procesos root)"
	@echo "  emergency-stop    - Parada de emergencia máxima agresividad"
	@echo "  verify-stop       - Verificar que todo esté realmente parado"
	@echo ""
	@echo "🔄 COMANDOS DE REINICIO:"
	@echo "  restart-nuclear   - Parada nuclear + inicio"
	@echo "  restart-verified  - Parada + verificación + inicio"
	@echo "  maintenance-cycle - Ciclo completo de mantenimiento"
	@echo ""
	@echo "📊 MONITOREO:"
	@echo "  status-complete   - Estado detallado del sistema"
	@echo ""
	@echo "💡 RECOMENDACIÓN:"
	@echo "  Usar 'make stop' (nuclear) como método estándar de parada"
	@echo "  El método tradicional no puede matar procesos root efectivamente"

# Integrar help nuclear en help principal
help: help-nuclear
	@echo ""
	@echo "Para ayuda completa de parada nuclear: make help-nuclear"

# NOTA: Para aplicar este parche al Makefile existente:
#
# 1. Asegurar que nuclear-stop.sh existe y es ejecutable
# 2. Añadir estas reglas al Makefile existente
# 3. Cambiar la regla 'stop' existente por 'stop-gentle'
# 4. Hacer que la nueva regla 'stop' use nuclear-stop.sh
#
# Comando para aplicar:
# cat Makefile-nuclear-stop.patch >> Makefile
# make setup-nuclear-stop