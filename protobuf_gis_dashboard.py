#!/usr/bin/env python3
"""
Dashboard GIS que lee mensajes PROTOBUF del agente promiscuo
¬°Esta es la soluci√≥n correcta para el problema real!
"""

import asyncio
import json
import logging
import socket
import sys
import os
from datetime import datetime
from aiohttp import web, WSMsgType, ClientSession
import aiohttp_cors
import zmq
import zmq.asyncio
from typing import Dict, Any, List, Optional

# Importar protobuf del proyecto
sys.path.insert(0, os.getcwd())

try:
    from src.protocols.protobuf import network_event_pb2

    print("‚úÖ Protobuf importado exitosamente")
    HAS_PROTOBUF = True
except ImportError as e:
    print(f"‚ùå Error importando protobuf: {e}")
    print("üí° Aseg√∫rate de que el directorio src/protocols/protobuf existe")
    HAS_PROTOBUF = False

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ProtobufEventProcessor:
    """Procesador de eventos protobuf del agente promiscuo"""

    def __init__(self):
        self.event_count = 0

    def protobuf_to_gis_event(self, protobuf_event) -> Dict[str, Any]:
        """Convertir evento protobuf a formato GIS"""
        try:
            self.event_count += 1

            # Extraer metadatos del agent_id (formato: "promiscuous-agent|{json}")
            metadata = {}
            if '|' in protobuf_event.agent_id:
                try:
                    _, metadata_json = protobuf_event.agent_id.split('|', 1)
                    metadata = json.loads(metadata_json)
                except:
                    pass

            protocols = metadata.get('protocols', ['Unknown'])
            direction = metadata.get('direction', 'unknown')

            # Determinar tipo de evento y estilo
            event_type, color, icon = self.classify_protocols(protocols)

            # Usar IP externa como preferencia
            display_ip = protobuf_event.target_ip
            if display_ip.startswith('192.168') or display_ip == 'unknown':
                display_ip = protobuf_event.source_ip
            if display_ip.startswith('192.168') or display_ip == 'unknown':
                display_ip = '8.8.8.8'  # Fallback

            # Generar coordenadas
            coordinates = self.ip_to_coordinates(display_ip)
            location = self.ip_to_location(display_ip)

            # Crear protocolo stack legible
            protocol_stack = " ‚Üí ".join(protocols)

            # Crear evento GIS
            gis_event = {
                'id': f"protobuf_{self.event_count}_{protobuf_event.event_id}",
                'timestamp': datetime.fromtimestamp(protobuf_event.timestamp / 1e9).isoformat(),
                'type': event_type,
                'severity': self.get_severity(protocols, direction),
                'icon': icon,
                'color': color,
                'ip_address': display_ip,
                'source_ip': protobuf_event.source_ip,
                'target_ip': protobuf_event.target_ip,
                'src_port': protobuf_event.src_port,
                'dest_port': protobuf_event.dest_port,
                'packet_size': protobuf_event.packet_size,
                'protocols': protocols,
                'protocol_stack': protocol_stack,
                'direction': direction,
                'title': f"{icon} {event_type.replace('_', ' ').title()}",
                'description': f"{protocol_stack}: {protobuf_event.source_ip}:{protobuf_event.src_port} ‚Üí {protobuf_event.target_ip}:{protobuf_event.dest_port}",
                'location': location,
                'coordinates': coordinates,
                'raw_data': f"Protocols: {protocol_stack}, Size: {protobuf_event.packet_size}B",
                'source': 'Protobuf-Agent',
                'metadata': metadata
            }

            return gis_event

        except Exception as e:
            logger.error(f"Error convirtiendo evento protobuf: {e}")
            return None

    def classify_protocols(self, protocols: List[str]) -> tuple:
        """Clasificar protocolos y asignar color/icono"""
        protocols_lower = [p.lower() for p in protocols]

        # Prioridad por seguridad/importancia
        if any(p in protocols_lower for p in ['https', 'tls']):
            return 'https_traffic', '#00ff88', 'üîí'
        elif 'quic' in protocols_lower:
            return 'quic_traffic', '#ff88aa', '‚ö°'
        elif 'ssh' in protocols_lower:
            return 'ssh_connection', '#ff4444', 'üîê'
        elif any(p in protocols_lower for p in ['dns', 'dns-query']):
            return 'dns_query', '#44aaff', 'üåê'
        elif 'arp' in protocols_lower:
            return 'arp_activity', '#ffaa88', 'üè†'
        elif any(p in protocols_lower for p in ['http', 'http-data']):
            return 'http_traffic', '#ffaa44', 'üåç'
        elif any(p in protocols_lower for p in ['tcp', 'udp']):
            return 'network_traffic', '#4488ff', 'üì°'
        elif any(p in protocols_lower for p in ['raw', 'raw-data']):
            return 'raw_data', '#888888', 'üìä'
        elif any(p in protocols_lower for p in ['icmp', 'icmpv6']):
            return 'icmp_traffic', '#ff8844', 'üì∂'
        else:
            return 'unknown_traffic', '#666666', '‚ùì'

    def get_severity(self, protocols: List[str], direction: str) -> str:
        """Determinar severidad del evento"""
        protocols_lower = [p.lower() for p in protocols]

        if 'ssh' in protocols_lower:
            return 'high'
        elif direction == 'inbound' and any(p in protocols_lower for p in ['tcp', 'udp']):
            return 'medium'
        elif any(p in protocols_lower for p in ['https', 'quic', 'tls']):
            return 'low'
        else:
            return 'info'

    def ip_to_coordinates(self, ip: str) -> List[float]:
        """Convertir IP a coordenadas geogr√°ficas"""
        # IPs conocidas con ubicaciones reales
        known_ips = {
            '8.8.8.8': [37.4419, -122.0782],  # Google DNS
            '1.1.1.1': [37.7621, -122.3971],  # Cloudflare
            '172.64.155.69': [37.7621, -122.3971],  # Cloudflare
            '142.250.191.3': [37.4419, -122.0782],  # Google
            '34.117.41.85': [37.4419, -122.0782],  # Google Cloud
            '151.101.128.223': [40.7589, -73.9851],  # Fastly NYC
            '172.224.53.5': [47.6062, -122.3321],  # Microsoft Seattle
            '172.224.196.132': [47.6062, -122.3321],  # Microsoft
        }

        if ip in known_ips:
            return known_ips[ip]

        # Para IPs locales, variar en Madrid
        if ip.startswith('192.168') or ip.startswith('10.') or ip.startswith('172.'):
            hash_val = hash(ip) % 1000
            lat = 40.4168 + (hash_val / 100000)
            lng = -3.7038 + (hash_val / 100000)
            return [lat, lng]

        # Para otras IPs, generar coordenadas realistas
        hash_val = hash(ip) % 10000

        # Distribuir por regiones principales del mundo
        regions = [
            ([40.7589, -73.9851], "North America"),  # New York
            ([51.5074, -0.1278], "Europe"),  # London
            ([35.6762, 139.6503], "Asia"),  # Tokyo
            ([-33.8688, 151.2093], "Oceania"),  # Sydney
            ([37.7749, -122.4194], "West Coast"),  # San Francisco
        ]

        region_coords, region_name = regions[hash_val % len(regions)]

        # A√±adir variaci√≥n peque√±a
        lat = region_coords[0] + ((hash_val % 200) - 100) / 1000
        lng = region_coords[1] + ((hash_val % 200) - 100) / 1000

        return [lat, lng]

    def ip_to_location(self, ip: str) -> Dict[str, str]:
        """Convertir IP a informaci√≥n de ubicaci√≥n"""
        known_locations = {
            '8.8.8.8': {'city': 'Mountain View', 'country': 'US', 'org': 'Google'},
            '1.1.1.1': {'city': 'San Francisco', 'country': 'US', 'org': 'Cloudflare'},
            '172.64.155.69': {'city': 'San Francisco', 'country': 'US', 'org': 'Cloudflare'},
            '142.250.191.3': {'city': 'Mountain View', 'country': 'US', 'org': 'Google'},
            '34.117.41.85': {'city': 'Mountain View', 'country': 'US', 'org': 'Google Cloud'},
            '151.101.128.223': {'city': 'New York', 'country': 'US', 'org': 'Fastly'},
            '172.224.53.5': {'city': 'Seattle', 'country': 'US', 'org': 'Microsoft'},
            '172.224.196.132': {'city': 'Seattle', 'country': 'US', 'org': 'Microsoft'},
        }

        if ip in known_locations:
            location = known_locations[ip]
            coords = self.ip_to_coordinates(ip)
            return {
                'lat': coords[0],
                'lng': coords[1],
                'city': location['city'],
                'country': location['country'],
                'org': location['org']
            }

        if ip.startswith('192.168') or ip.startswith('10.') or ip.startswith('172.'):
            coords = self.ip_to_coordinates(ip)
            return {
                'lat': coords[0],
                'lng': coords[1],
                'city': 'Red Local Madrid',
                'country': 'ES',
                'org': 'Red Privada'
            }

        # Para otras IPs
        coords = self.ip_to_coordinates(ip)
        return {
            'lat': coords[0],
            'lng': coords[1],
            'city': 'Unknown City',
            'country': 'Unknown',
            'org': 'Unknown ISP'
        }


class ProtobufGISDashboard:
    """Dashboard GIS que lee eventos protobuf del agente promiscuo"""

    def __init__(self, port: int = 8770):
        self.port = port
        self.app = web.Application()
        self.websockets: set = set()
        self.recent_events: List[Dict[str, Any]] = []
        self.event_processor = ProtobufEventProcessor()

        # ZeroMQ setup
        self.context = zmq.asyncio.Context()
        self.subscriber: Optional[zmq.asyncio.Socket] = None
        self.zmq_task: Optional[asyncio.Task] = None
        self.is_running = False

        self.setup_routes()
        self.setup_cors()

    def setup_routes(self):
        self.app.router.add_get('/', self.serve_dashboard)
        self.app.router.add_get('/ws', self.websocket_handler)
        self.app.router.add_get('/api/status', self.api_status)
        self.app.router.add_get('/api/events', self.api_events)
        self.app.router.add_post('/api/events/simulate', self.api_simulate)

    def setup_cors(self):
        cors = aiohttp_cors.setup(self.app, defaults={
            "*": aiohttp_cors.ResourceOptions(
                allow_credentials=True,
                expose_headers="*",
                allow_headers="*",
                allow_methods="*"
            )
        })
        for route in list(self.app.router.routes()):
            cors.add(route)

    async def setup_protobuf_subscriber(self):
        """Configurar subscriber para mensajes protobuf"""
        if not HAS_PROTOBUF:
            logger.error("‚ùå Protobuf no disponible - no se pueden leer eventos del agente")
            return False

        # Buscar puertos activos
        active_ports = []
        for port in [5555, 5556, 5557, 5558]:
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(1)
                    if s.connect_ex(('localhost', port)) == 0:
                        active_ports.append(port)
            except:
                pass

        if not active_ports:
            logger.warning("‚ùå No se encontraron puertos ZeroMQ activos")
            return False

        # Conectar al primer puerto disponible
        port = active_ports[0]
        try:
            self.subscriber = self.context.socket(zmq.SUB)
            self.subscriber.connect(f"tcp://localhost:{port}")
            self.subscriber.setsockopt(zmq.SUBSCRIBE, b"")  # Sin filtros

            logger.info(f"‚úÖ Conectado a ZeroMQ puerto {port} para recibir eventos protobuf")

            # Iniciar task de recepci√≥n
            self.zmq_task = asyncio.create_task(self.protobuf_message_loop())
            return True

        except Exception as e:
            logger.error(f"‚ùå Error conectando a ZeroMQ puerto {port}: {e}")
            return False

    async def protobuf_message_loop(self):
        """Loop para recibir mensajes protobuf"""
        logger.info("üîÑ Iniciando loop de recepci√≥n de eventos protobuf...")

        while self.is_running:
            try:
                if await self.subscriber.poll(1000, zmq.POLLIN):
                    # Recibir mensaje binario (protobuf)
                    raw_message = await self.subscriber.recv()

                    if not HAS_PROTOBUF:
                        continue

                    # Deserializar protobuf
                    try:
                        protobuf_event = network_event_pb2.NetworkEvent()
                        protobuf_event.ParseFromString(raw_message)

                        # Convertir a evento GIS
                        gis_event = self.event_processor.protobuf_to_gis_event(protobuf_event)

                        if gis_event:
                            # A√±adir a eventos recientes
                            self.recent_events.append(gis_event)
                            if len(self.recent_events) > 1000:
                                self.recent_events = self.recent_events[-1000:]

                            # Log cada 10 eventos
                            if self.event_processor.event_count % 10 == 1:
                                logger.info(
                                    f"üì° Evento #{self.event_processor.event_count}: {gis_event['title']} - {gis_event['ip_address']}")

                            # Enviar a WebSockets
                            await self.broadcast_event(gis_event)

                    except Exception as e:
                        logger.error(f"‚ùå Error deserializando protobuf: {e}")

            except Exception as e:
                logger.error(f"‚ùå Error en loop protobuf: {e}")
                await asyncio.sleep(1)

    async def broadcast_event(self, event: Dict[str, Any]):
        """Enviar evento a todos los WebSockets"""
        if not self.websockets:
            return

        message = json.dumps({
            'type': 'gis_event',
            **event
        })

        websockets_copy = self.websockets.copy()
        for ws in websockets_copy:
            try:
                if ws.closed:
                    self.websockets.discard(ws)
                    continue
                await ws.send_str(message)
            except Exception as e:
                logger.debug(f"Error enviando a WebSocket: {e}")
                self.websockets.discard(ws)

    async def serve_dashboard(self, request):
        """Servir dashboard HTML"""
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>SCADA Protobuf Reader - GIS Dashboard</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body { 
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                    background: #0a0a0a; color: #fff; overflow-x: hidden;
                }
                .container { 
                    display: grid; 
                    grid-template-columns: 1fr 400px; 
                    height: 100vh; 
                    gap: 10px; 
                    padding: 10px;
                }
                .map-container { 
                    background: #1a1a1a; 
                    border-radius: 10px; 
                    border: 1px solid #333; 
                    overflow: hidden; 
                    position: relative;
                }
                #map { height: 100%; border-radius: 10px; }
                .sidebar { 
                    background: #1a1a1a; 
                    border-radius: 10px; 
                    border: 1px solid #333; 
                    display: flex; 
                    flex-direction: column; 
                    overflow: hidden;
                }
                .sidebar-header { 
                    background: linear-gradient(135deg, #4CAF50, #45a049); 
                    padding: 15px; 
                    text-align: center;
                }
                .sidebar-header h3 { 
                    color: white; 
                    margin: 0;
                    font-size: 1.1rem;
                }
                .events-list { 
                    flex: 1; 
                    overflow-y: auto; 
                    padding: 10px;
                }
                .event-item { 
                    background: rgba(255,255,255,0.05); 
                    margin-bottom: 8px; 
                    padding: 12px; 
                    border-radius: 8px; 
                    border-left: 4px solid #4CAF50; 
                    transition: all 0.3s ease;
                    animation: slideIn 0.5s ease-out;
                    cursor: pointer;
                }
                .event-item:hover { 
                    background: rgba(255,255,255,0.1); 
                    transform: translateX(5px);
                }
                .event-item.severity-high { border-left-color: #ff4444; }
                .event-item.severity-medium { border-left-color: #ff8800; }
                .event-item.severity-low { border-left-color: #ffaa00; }
                .event-item.severity-info { border-left-color: #4488ff; }
                @keyframes slideIn {
                    from { opacity: 0; transform: translateX(-20px); }
                    to { opacity: 1; transform: translateX(0); }
                }
                .event-header { 
                    display: flex; 
                    justify-content: space-between; 
                    margin-bottom: 8px;
                }
                .event-title { 
                    font-weight: bold; 
                    color: #fff; 
                    font-size: 0.9rem;
                }
                .event-time { 
                    font-size: 0.7rem; 
                    color: #888;
                }
                .event-description { 
                    font-size: 0.8rem; 
                    color: #ccc;
                    margin-bottom: 5px;
                }
                .event-details {
                    font-size: 0.7rem;
                    color: #999;
                }
                .status-bar {
                    position: absolute;
                    top: 10px;
                    left: 10px;
                    background: rgba(0,0,0,0.8);
                    padding: 10px 15px;
                    border-radius: 5px;
                    z-index: 1000;
                    backdrop-filter: blur(10px);
                }
                .status-connected { color: #4CAF50; }
                .status-disconnected { color: #ff4444; }
                .controls {
                    position: absolute;
                    top: 10px;
                    right: 10px;
                    z-index: 1000;
                    display: flex;
                    gap: 10px;
                }
                .control-btn {
                    background: rgba(0,0,0,0.8);
                    color: white;
                    border: none;
                    padding: 8px 12px;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 0.8rem;
                    backdrop-filter: blur(10px);
                    transition: all 0.3s ease;
                }
                .control-btn:hover {
                    background: rgba(76,175,80,0.8);
                    transform: scale(1.05);
                }
                .protobuf-badge {
                    background: linear-gradient(45deg, #4CAF50, #45a049);
                    padding: 2px 6px;
                    border-radius: 3px;
                    font-size: 0.7rem;
                    margin-left: 8px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="map-container">
                    <div id="map"></div>
                    <div class="status-bar">
                        <span id="status" class="status-disconnected">üîó Connecting to Protobuf Stream...</span>
                        <div style="font-size: 0.8rem; margin-top: 5px;">
                            Events: <span id="event-count">0</span> | 
                            Rate: <span id="event-rate">0/min</span> |
                            Total: <span id="total-events">0</span>
                        </div>
                    </div>
                    <div class="controls">
                        <button class="control-btn" onclick="centerMap()">üéØ Center</button>
                        <button class="control-btn" onclick="clearEvents()">üóëÔ∏è Clear</button>
                        <button class="control-btn" onclick="checkStatus()">üìä Status</button>
                    </div>
                </div>

                <div class="sidebar">
                    <div class="sidebar-header">
                        <h3>üîó Protobuf Events Feed <span class="protobuf-badge">PROTOBUF</span></h3>
                        <div style="font-size: 0.8rem; margin-top: 5px; opacity: 0.9;">
                            Reading binary protobuf from SCADA agent
                        </div>
                    </div>
                    <div class="events-list" id="events-list">
                        <div style="text-align: center; color: #666; padding: 20px;">
                            Conectando al stream protobuf del agente...<br>
                            <small>Los eventos reales aparecer√°n aqu√≠</small>
                        </div>
                    </div>
                </div>
            </div>

            <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
            <script>
                let map;
                let ws = null;
                let markers = [];
                let eventCount = 0;
                let totalEvents = 0;
                let startTime = Date.now();

                function initMap() {
                    map = L.map('map').setView([40.4168, -3.7038], 6);
                    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
                        attribution: '¬© OpenStreetMap contributors',
                        subdomains: 'abcd',
                        maxZoom: 19
                    }).addTo(map);
                }

                function connectWebSocket() {
                    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                    const wsUrl = `${protocol}//${window.location.host}/ws`;

                    ws = new WebSocket(wsUrl);

                    ws.onopen = function() {
                        console.log('‚úÖ Protobuf Reader WebSocket connected');
                        document.getElementById('status').textContent = 'üîó Protobuf Stream Connected';
                        document.getElementById('status').className = 'status-connected';
                    };

                    ws.onmessage = function(event) {
                        const data = JSON.parse(event.data);
                        if (data.type === 'gis_event') {
                            addEventToMap(data);
                            addEventToSidebar(data);
                            updateCounter();
                        }
                    };

                    ws.onclose = function() {
                        document.getElementById('status').textContent = '‚ùå Disconnected - Reconnecting...';
                        document.getElementById('status').className = 'status-disconnected';
                        setTimeout(connectWebSocket, 5000);
                    };

                    ws.onerror = function() {
                        document.getElementById('status').textContent = '‚ùå Connection Error';
                        document.getElementById('status').className = 'status-disconnected';
                    };
                }

                function addEventToMap(event) {
                    if (!event.coordinates) return;

                    const [lat, lng] = event.coordinates;
                    const markerHtml = `
                        <div style="
                            background-color: ${event.color}; 
                            width: 18px; height: 18px; 
                            border-radius: 50%; 
                            border: 2px solid white; 
                            display: flex; 
                            align-items: center; 
                            justify-content: center; 
                            font-size: 9px;
                            box-shadow: 0 0 10px ${event.color}50;
                        ">${event.icon}</div>
                    `;

                    const customIcon = L.divIcon({
                        html: markerHtml,
                        className: 'custom-marker',
                        iconSize: [18, 18],
                        iconAnchor: [9, 9]
                    });

                    const marker = L.marker([lat, lng], { icon: customIcon }).addTo(map);

                    const popupContent = `
                        <div style="color: #333; min-width: 250px;">
                            <h4 style="color: ${event.color}; margin-bottom: 10px;">${event.title}</h4>
                            <p><strong>Protocol Stack:</strong> ${event.protocol_stack}</p>
                            <p><strong>Source:</strong> ${event.source_ip}:${event.src_port}</p>
                            <p><strong>Target:</strong> ${event.target_ip}:${event.dest_port}</p>
                            <p><strong>Direction:</strong> ${event.direction}</p>
                            <p><strong>Packet Size:</strong> ${event.packet_size} bytes</p>
                            <p><strong>Location:</strong> ${event.location.city}, ${event.location.country}</p>
                            <p><strong>Time:</strong> ${new Date(event.timestamp).toLocaleString()}</p>
                            <p style="font-size: 0.8em; color: #666;"><strong>Source:</strong> ${event.source}</p>
                        </div>
                    `;

                    marker.bindPopup(popupContent);
                    markers.push({ marker, event, timestamp: Date.now() });

                    if (markers.length > 150) {
                        const oldMarker = markers.shift();
                        map.removeLayer(oldMarker.marker);
                    }
                }

                function addEventToSidebar(event) {
                    const eventsList = document.getElementById('events-list');

                    if (eventsList.children[0] && eventsList.children[0].style.textAlign === 'center') {
                        eventsList.innerHTML = '';
                    }

                    const eventElement = document.createElement('div');
                    eventElement.className = `event-item severity-${event.severity}`;
                    eventElement.innerHTML = `
                        <div class="event-header">
                            <div class="event-title">${event.title}</div>
                            <div class="event-time">${new Date(event.timestamp).toLocaleTimeString()}</div>
                        </div>
                        <div class="event-description">${event.description}</div>
                        <div class="event-details">
                            ${event.direction} | ${event.packet_size}B | ${event.location.city}
                        </div>
                    `;

                    eventElement.addEventListener('click', () => {
                        if (event.coordinates) {
                            map.setView(event.coordinates, 10);
                            const markerData = markers.find(m => m.event.id === event.id);
                            if (markerData) markerData.marker.openPopup();
                        }
                    });

                    eventsList.insertBefore(eventElement, eventsList.firstChild);

                    while (eventsList.children.length > 100) {
                        eventsList.removeChild(eventsList.lastChild);
                    }
                }

                function updateCounter() {
                    eventCount++;
                    totalEvents++;
                    document.getElementById('event-count').textContent = eventCount;
                    document.getElementById('total-events').textContent = totalEvents;

                    const elapsed = (Date.now() - startTime) / 60000;
                    const rate = Math.round(eventCount / Math.max(elapsed, 1));
                    document.getElementById('event-rate').textContent = rate + '/min';
                }

                function centerMap() {
                    if (markers.length > 0) {
                        const group = new L.featureGroup(markers.map(m => m.marker));
                        map.fitBounds(group.getBounds().pad(0.1));
                    }
                }

                function clearEvents() {
                    markers.forEach(m => map.removeLayer(m.marker));
                    markers = [];
                    eventCount = 0;
                    startTime = Date.now();
                    updateCounter();

                    document.getElementById('events-list').innerHTML = `
                        <div style="text-align: center; color: #666; padding: 20px;">
                            Eventos eliminados. Leyendo stream protobuf...<br>
                            <small>Los eventos reales aparecer√°n en tiempo real</small>
                        </div>
                    `;
                }

                async function checkStatus() {
                    try {
                        const response = await fetch('/api/status');
                        const data = await response.json();
                        console.log('üìä Status:', data);
                        alert(`Events captured: ${data.events_captured}\\nWebSocket connections: ${data.websocket_connections}\\nProtobuf reader: ${data.protobuf_active ? 'Active' : 'Inactive'}`);
                    } catch (e) {
                        console.error('Error:', e);
                    }
                }

                document.addEventListener('DOMContentLoaded', function() {
                    console.log('üöÄ Protobuf GIS Dashboard Loading...');
                    initMap();
                    connectWebSocket();
                });
            </script>
        </body>
        </html>
        """
        return web.Response(text=html, content_type='text/html')

    async def websocket_handler(self, request):
        """Manejar conexiones WebSocket"""
        ws = web.WebSocketResponse(heartbeat=30)
        await ws.prepare(request)

        self.websockets.add(ws)
        logger.info(f"‚úÖ Cliente WebSocket conectado. Total: {len(self.websockets)}")

        try:
            async for msg in ws:
                if msg.type == WSMsgType.TEXT:
                    logger.debug(f"üì® WebSocket message: {msg.data}")
                elif msg.type in (WSMsgType.ERROR, WSMsgType.CLOSE):
                    break
        except Exception as e:
            logger.error(f"‚ùå WebSocket error: {e}")
        finally:
            self.websockets.discard(ws)
            logger.info(f"üîå Cliente WebSocket desconectado. Restantes: {len(self.websockets)}")

        return ws

    async def api_status(self, request):
        """API de estado"""
        return web.json_response({
            'status': 'active',
            'events_captured': len(self.recent_events),
            'websocket_connections': len(self.websockets),
            'protobuf_active': self.is_running and HAS_PROTOBUF,
            'zmq_connected': self.subscriber is not None,
            'timestamp': datetime.now().isoformat()
        })

    async def api_events(self, request):
        """API de eventos"""
        return web.json_response(self.recent_events[-50:])

    async def api_simulate(self, request):
        """Simular evento (no aplicable para protobuf real)"""
        return web.json_response({'message': 'Using real protobuf events from agent'})


async def main():
    """Funci√≥n principal"""
    dashboard = ProtobufGISDashboard()

    # Buscar puerto disponible
    for port in range(8770, 8780):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('localhost', port))
                dashboard.port = port
                break
        except OSError:
            continue

    try:
        # Configurar subscriber protobuf
        dashboard.is_running = True
        protobuf_ok = await dashboard.setup_protobuf_subscriber()

        # Iniciar servidor web
        runner = web.AppRunner(dashboard.app)
        await runner.setup()

        site = web.TCPSite(runner, 'localhost', dashboard.port)
        await site.start()

        print(f"""
üöÄ Protobuf GIS Dashboard - SOLUCI√ìN REAL
üåê URL: http://localhost:{dashboard.port}
üîó Modo: Lectura directa de protobuf ZeroMQ del agente promiscuo
üì° Protobuf: {'‚úÖ Disponible' if HAS_PROTOBUF else '‚ùå No disponible'}
üó∫Ô∏è Caracter√≠sticas:
   ‚Ä¢ Lee eventos PROTOBUF BINARIOS directamente del agente
   ‚Ä¢ Deserializa protobuf a formato GIS en tiempo real
   ‚Ä¢ Visualizaci√≥n geogr√°fica de eventos reales del sistema SCADA
   ‚Ä¢ Conecta directamente al stream ZeroMQ del agente promiscuo

üìä Estado:
   ‚Ä¢ ZeroMQ Subscriber: {'‚úÖ Conectado' if protobuf_ok else '‚ùå No conectado'}
   ‚Ä¢ Protobuf Support: {'‚úÖ Disponible' if HAS_PROTOBUF else '‚ùå No disponible'}
   ‚Ä¢ Agente Promiscuo: {'Debe estar corriendo' if protobuf_ok else 'No detectado'}

üí° ¬°Esta es la soluci√≥n REAL al problema!
   Los eventos del agente promiscuo aparecer√°n en tiempo real.

Presiona Ctrl+C para detener...
        """)

        # Esperar se√±al de parada
        await asyncio.Event().wait()

    except KeyboardInterrupt:
        print("\nüõë Deteniendo Protobuf Reader...")
    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
    finally:
        dashboard.is_running = False
        if dashboard.zmq_task:
            dashboard.zmq_task.cancel()
        if dashboard.subscriber:
            dashboard.subscriber.close()
        dashboard.context.term()
        await runner.cleanup()


if __name__ == "__main__":
    asyncio.run(main())