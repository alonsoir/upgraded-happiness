# =============================================================================
# üõ°Ô∏è Upgraded Happiness - Sistema Autoinmune Digital v2.0 (PRODUCTION)
# =============================================================================
# Arquitectura: promiscuous_agent ‚Üí geoip_enricher ‚Üí ml_detector ‚Üí dashboard ‚Üí firewall_agent
# Branch: feature/claude-integration
# =============================================================================

SHELL := /bin/bash
.DEFAULT_GOAL := help

# =============================================================================
# COLORES Y EMOJIS
# =============================================================================
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
PURPLE = \033[0;35m
CYAN = \033[0;36m
NC = \033[0m # No Color

# =============================================================================
# CONFIGURACI√ìN DEL PROYECTO
# =============================================================================
# Informaci√≥n del proyecto
PROJECT_NAME = upgraded-happiness
PROJECT_VERSION = v2.0.0
BRANCH = feature/claude-integration
REPO_URL = https://github.com/alonsoir/upgraded-happiness

# Python y Entorno
PYTHON = python3
VENV_NAME = upgraded_happiness_venv
VENV_BIN = $(VENV_NAME)/bin
PYTHON_VENV = $(VENV_BIN)/python
PIP_VENV = $(VENV_BIN)/pip
ACTIVATE = source $(VENV_BIN)/activate

# =============================================================================
# COMPONENTES PRINCIPALES (ARQUITECTURA DISTRIBUIDA)
# =============================================================================
# Core Pipeline Components (‚úÖ = Operativo, üîÑ = En desarrollo, üéØ = Planificado)
PROMISCUOUS_AGENT = promiscuous_agent.py              # ‚úÖ Captura promiscua
GEOIP_ENRICHER = geoip_enricher.py                   # ‚úÖ Enriquecimiento GeoIP
ML_DETECTOR = lightweight_ml_detector.py             # ‚úÖ Detecci√≥n ML (refinando)
DASHBOARD = real_zmq_dashboard_with_firewall.py      # üîÑ Dashboard principal (mejorando)
FIREWALL_AGENT = simple_firewall_agent.py            # ‚úÖ Agente firewall (integrando)

# Advanced Components (Pr√≥ximas fases)
NEURAL_TRAINER = advanced_trainer.py         # üéØ Entrenamiento continuo
RAG_ENGINE = autoinmune_rag_engine.py               # üéØ Interfaz conversacional

# Configuraciones JSON
PROMISCUOUS_CONFIG = enhanced_agent_config.json
GEOIP_CONFIG = geoip_enricher_config.json
ML_CONFIG = lightweight_ml_detector_config.json
DASHBOARD_CONFIG = dashboard_config.json                    # ‚úÖ Primer par√°metro (original)
FIREWALL_CONFIG = simple_firewall_agent_config.json       # ‚úÖ Primer par√°metro (original)
NEURAL_CONFIG = config-advanced-trainer.json
RAG_CONFIG = rag_engine_config.json

# Configuraciones JSON adicionales (segundos par√°metros)
DASHBOARD_FIREWALL_CONFIG = config/firewall_rules_dashboard.json  # ‚úÖ Segundo par√°metro dashboard
FIREWALL_AGENT_RULES_CONFIG = config/firewall_rules_agent.json   # ‚úÖ Segundo par√°metro firewall agent

# =============================================================================
# ARQUITECTURA DE RED (ZeroMQ)
# =============================================================================
# Pipeline Ports (Flujo de datos)
CAPTURE_PORT = 5559          # promiscuous_agent ‚Üí geoip_enricher
GEOIP_PORT = 5560           # geoip_enricher ‚Üí ml_detector
ML_PORT = 5561              # ml_detector ‚Üí dashboard
FIREWALL_PORT = 5562        # dashboard ‚Üí firewall_agent

# Service Ports
DASHBOARD_WEB_PORT = 8080   # Web UI principal
RAG_WEB_PORT = 8090         # RAG Engine (pr√≥ximamente)
NEURAL_PORT = 5563          # Neural trainer (pr√≥ximamente)

# =============================================================================
# GESTI√ìN DE PROCESOS
# =============================================================================
# Directorios
PIDS_DIR = .pids
LOGS_DIR = logs
DATA_DIR = data
MODELS_DIR = models

# PIDs para gesti√≥n de procesos
PROMISCUOUS_PID = $(PIDS_DIR)/promiscuous_agent.pid
GEOIP_PID = $(PIDS_DIR)/geoip_enricher.pid
ML_PID = $(PIDS_DIR)/ml_detector.pid
DASHBOARD_PID = $(PIDS_DIR)/dashboard.pid
FIREWALL_PID = $(PIDS_DIR)/firewall_agent.pid
NEURAL_PID = $(PIDS_DIR)/neural_trainer.pid
RAG_PID = $(PIDS_DIR)/rag_engine.pid

# Logs para debugging
PROMISCUOUS_LOG = $(LOGS_DIR)/promiscuous_agent.log
GEOIP_LOG = $(LOGS_DIR)/geoip_enricher.log
ML_LOG = $(LOGS_DIR)/ml_detector.log
DASHBOARD_LOG = $(LOGS_DIR)/dashboard.log
FIREWALL_LOG = $(LOGS_DIR)/firewall_agent.log
NEURAL_LOG = $(LOGS_DIR)/neural_trainer.log
RAG_LOG = $(LOGS_DIR)/rag_engine.log

# Scripts de utilidad
NUCLEAR_STOP_SCRIPT = nuclear-stop.sh
MONITOR_SCRIPT = monitor_autoinmune.sh

# =============================================================================
# PHONY DECLARATIONS
# =============================================================================
.PHONY: help setup install clean \
        start start-bg start-core start-advanced stop stop-nuclear restart \
        status monitor logs logs-tail logs-errors \
        setup-perms verify check-geoip check-deps \
        show-dashboard show-architecture show-roadmap \
        quick debug test benchmark \
        dev-start dev-stop dev-restart \
        start-improved verify-start status-detailed create-config-dirs

# =============================================================================
# HELP Y DOCUMENTACI√ìN
# =============================================================================
help:
	@echo "$(CYAN)üß¨ Sistema Autoinmune Digital v2.0$(NC)"
	@echo "$(CYAN)=====================================$(NC)"
	@echo "$(PURPLE)Branch: $(BRANCH)$(NC)"
	@echo "$(PURPLE)Repo: $(REPO_URL)$(NC)"
	@echo ""
	@echo "$(YELLOW)üöÄ COMANDOS PRINCIPALES:$(NC)"
	@echo "  $(GREEN)make quick$(NC)            - Setup completo + Start (RECOMENDADO)"
	@echo "  $(GREEN)make start$(NC)            - Iniciar sistema completo"
	@echo "  $(GREEN)make show-dashboard$(NC)   - Abrir dashboard web"
	@echo "  $(GREEN)make stop$(NC)             - Detener sistema completo"
	@echo "  $(GREEN)make status$(NC)           - Ver estado del sistema"
	@echo ""
	@echo "$(YELLOW)üì¶ SETUP Y CONFIGURACI√ìN:$(NC)"
	@echo "  setup                  - Crear entorno virtual"
	@echo "  install                - Instalar dependencias"
	@echo "  setup-perms            - Configurar permisos sudo (iptables)"
	@echo "  check-geoip            - Verificar configuraci√≥n GeoIP"
	@echo "  check-deps             - Verificar dependencias"
	@echo "  verify                 - Verificar integridad del sistema"
	@echo "  clean                  - Limpiar todo"
	@echo ""
	@echo "$(YELLOW)üîÑ OPERACIONES AVANZADAS:$(NC)"
	@echo "  start-core             - Solo componentes core (b√°sico)"
	@echo "  start-advanced         - Componentes avanzados (RAG, Neural)"
	@echo "  start-bg               - Iniciar en background"
	@echo "  restart                - Reiniciar sistema completo"
	@echo "  stop-nuclear           - Parada nuclear (emergencia)"
	@echo ""
	@echo "$(YELLOW)üìä MONITORIZACI√ìN Y DEBUG:$(NC)"
	@echo "  monitor                - Monitor tiempo real"
	@echo "  logs                   - Ver logs de todos los componentes"
	@echo "  logs-tail              - Seguir logs en tiempo real"
	@echo "  logs-errors            - Ver solo errores"
	@echo "  debug                  - Modo debug interactivo"
	@echo "  benchmark              - Ejecutar benchmarks"
	@echo ""
	@echo "$(YELLOW)üîß DESARROLLO:$(NC)"
	@echo "  dev-start              - Iniciar en modo desarrollo"
	@echo "  dev-stop               - Parar modo desarrollo"
	@echo "  test                   - Ejecutar tests"
	@echo ""
	@echo "$(YELLOW)‚ÑπÔ∏è  INFORMACI√ìN:$(NC)"
	@echo "  show-architecture      - Mostrar arquitectura del sistema"
	@echo "  show-roadmap           - Ver roadmap y estado actual"
	@echo ""
	@echo "$(CYAN)üèóÔ∏è ARQUITECTURA ACTUAL:$(NC)"
	@echo "  promiscuous_agent ($(CAPTURE_PORT)) ‚Üí geoip_enricher ($(GEOIP_PORT)) ‚Üí ml_detector ($(ML_PORT)) ‚Üí dashboard ($(FIREWALL_PORT)) ‚Üí firewall_agent"
	@echo ""
	@echo "$(CYAN)üåê SERVICIOS WEB:$(NC)"
	@echo "  Dashboard: http://localhost:$(DASHBOARD_WEB_PORT)"
	@echo "  RAG Engine: http://localhost:$(RAG_WEB_PORT) (pr√≥ximamente)"

# =============================================================================
# INFORMACI√ìN DEL SISTEMA
# =============================================================================
show-architecture:
	@echo "$(CYAN)üèóÔ∏è Arquitectura del Sistema$(NC)"
	@echo "$(CYAN)==============================$(NC)"
	@echo ""
	@echo "$(YELLOW)üì° PIPELINE PRINCIPAL:$(NC)"
	@echo "  1. üïµÔ∏è  $(PROMISCUOUS_AGENT) ‚Üí Puerto $(CAPTURE_PORT) (‚úÖ Operativo)"
	@echo "  2. üåç $(GEOIP_ENRICHER) ‚Üí Puerto $(GEOIP_PORT) (‚úÖ Operativo)"
	@echo "  3. ü§ñ $(ML_DETECTOR) ‚Üí Puerto $(ML_PORT) (‚ö†Ô∏è Refinando)"
	@echo "  4. üìä $(DASHBOARD) ‚Üí Puerto $(FIREWALL_PORT) (üîÑ Mejorando)"
	@echo "  5. üõ°Ô∏è  $(FIREWALL_AGENT) (‚úÖ Integrando)"
	@echo ""
	@echo "$(YELLOW)üß† COMPONENTES AVANZADOS:$(NC)"
	@echo "  6. ü§ñ $(NEURAL_TRAINER) ‚Üí Puerto $(NEURAL_PORT) (üéØ Planificado)"
	@echo "  7. üó£Ô∏è  $(RAG_ENGINE) ‚Üí Puerto $(RAG_WEB_PORT) (üéØ En dise√±o)"
	@echo ""
	@echo "$(YELLOW)üåê SERVICIOS WEB:$(NC)"
	@echo "  üìä Dashboard: http://localhost:$(DASHBOARD_WEB_PORT)"
	@echo "  üó£Ô∏è  RAG Chat: http://localhost:$(RAG_WEB_PORT)"

show-roadmap:
	@echo "$(CYAN)üîÆ Roadmap del Proyecto$(NC)"
	@echo "$(CYAN)========================$(NC)"
	@echo ""
	@echo "$(GREEN)‚úÖ COMPLETADO (Q3 2025):$(NC)"
	@echo "  ‚Ä¢ Pipeline distribuido ZeroMQ/Protobuf"
	@echo "  ‚Ä¢ Captura promiscua con Scapy"
	@echo "  ‚Ä¢ Enriquecimiento GeoIP"
	@echo "  ‚Ä¢ Detecci√≥n ML b√°sica"
	@echo "  ‚Ä¢ Dashboard web"
	@echo "  ‚Ä¢ Cifrado AES-256-GCM"
	@echo ""
	@echo "$(YELLOW)üîÑ EN DESARROLLO ACTIVO:$(NC)"
	@echo "  ‚Ä¢ Dashboard-Firewall integration (click-to-block)"
	@echo "  ‚Ä¢ ML classification tuning"
	@echo "  ‚Ä¢ Auto-respuesta autom√°tica"
	@echo "  ‚Ä¢ RAG Engine con Claude"
	@echo ""
	@echo "$(BLUE)üéØ PR√ìXIMOS HITOS (Q4 2025):$(NC)"
	@echo "  ‚Ä¢ Neural trainer operativo"
	@echo "  ‚Ä¢ Threat intelligence feeds"
	@echo "  ‚Ä¢ Advanced correlation"
	@echo "  ‚Ä¢ Multi-region deployment"
	@echo ""
	@echo "$(PURPLE)üöÄ FUTURO (2026):$(NC)"
	@echo "  ‚Ä¢ Auto-scaling inteligente"
	@echo "  ‚Ä¢ Kubernetes integration"
	@echo "  ‚Ä¢ Quantum-ready encryption"
	@echo "  ‚Ä¢ Self-healing infrastructure"

# =============================================================================
# SETUP Y CONFIGURACI√ìN
# =============================================================================
create-config-dirs:
	@echo "$(BLUE)üìÅ Creando directorios de configuraci√≥n...$(NC)"
	@mkdir -p config
	@mkdir -p $(PIDS_DIR) $(LOGS_DIR) $(DATA_DIR) $(MODELS_DIR)
	@echo "$(GREEN)‚úÖ Directorios creados$(NC)"

setup: create-config-dirs
	@echo "$(BLUE)üîß Configurando entorno virtual...$(NC)"
	@if [ -d "$(VENV_NAME)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Entorno virtual ya existe$(NC)"; \
	else \
		$(PYTHON) -m venv $(VENV_NAME); \
		echo "$(GREEN)‚úÖ Entorno virtual creado$(NC)"; \
	fi
	@$(ACTIVATE) && $(PYTHON_VENV) -m pip install --upgrade pip
	@echo "$(GREEN)‚úÖ Setup completado$(NC)"

install: setup
	@echo "$(BLUE)üì¶ Instalando dependencias...$(NC)"
	@$(ACTIVATE) && $(PIP_VENV) install -r requirements.txt
	@echo "$(BLUE)üì¶ Instalando librer√≠as espec√≠ficas...$(NC)"
	@$(ACTIVATE) && $(PIP_VENV) install joblib scikit-learn xgboost lightgbm
	@$(ACTIVATE) && $(PIP_VENV) install zmq psutil geoip2 protobuf requests
	@$(ACTIVATE) && $(PIP_VENV) install fastapi uvicorn websockets
	@$(ACTIVATE) && $(PIP_VENV) install scapy netifaces
	@$(ACTIVATE) && $(PIP_VENV) install pandas numpy matplotlib seaborn
	@$(ACTIVATE) && $(PIP_VENV) install pytest pytest-asyncio
	@echo "$(GREEN)‚úÖ Dependencias instaladas$(NC)"

setup-perms:
	@echo "$(BLUE)üîß Configurando permisos de firewall...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Requiere sudo para iptables$(NC)"
	@sudo bash -c 'echo "$(USER) ALL=(ALL) NOPASSWD: /sbin/iptables" >> /etc/sudoers.d/$(USER)-iptables' || true
	@sudo chmod 0440 /etc/sudoers.d/$(USER)-iptables || true
	@echo "$(GREEN)‚úÖ Permisos configurados$(NC)"
	@sudo -n iptables -L >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Permisos funcionando$(NC)" || echo "$(RED)‚ùå Error en permisos - ejecutar: sudo make setup-perms$(NC)"

check-deps:
	@echo "$(BLUE)üîç Verificando dependencias...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import zmq; print('‚úÖ ZeroMQ disponible')" 2>/dev/null || echo "‚ùå ZeroMQ falta"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import scapy; print('‚úÖ Scapy disponible')" 2>/dev/null || echo "‚ùå Scapy falta"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import sklearn; print('‚úÖ Scikit-learn disponible')" 2>/dev/null || echo "‚ùå Scikit-learn falta"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import geoip2; print('‚úÖ GeoIP2 disponible')" 2>/dev/null || echo "‚ùå GeoIP2 falta"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import fastapi; print('‚úÖ FastAPI disponible')" 2>/dev/null || echo "‚ùå FastAPI falta"
	@which sudo >/dev/null && echo "‚úÖ sudo disponible" || echo "‚ùå sudo falta"

check-geoip:
	@echo "$(BLUE)üåç Verificando configuraci√≥n GeoIP...$(NC)"
	@if [ -f "GeoLite2-City.mmdb" ]; then \
		echo "  ‚úÖ Base de datos GeoLite2 encontrada"; \
		stat -c "%y" GeoLite2-City.mmdb | sed 's/^/  üìÖ √öltima modificaci√≥n: /' 2>/dev/null || stat -f "%Sm" GeoLite2-City.mmdb | sed 's/^/  üìÖ √öltima modificaci√≥n: /'; \
	else \
		echo "  ‚ö†Ô∏è  Base de datos GeoLite2 NO encontrada"; \
		echo "  üí° Se usar√° ip-api.com como fallback"; \
		echo "  üí° Para descargar GeoLite2: https://dev.maxmind.com/geoip/geolite2-free-geolocation-data"; \
	fi
	@echo "  üîó Verificando conectividad con ip-api.com..."
	@curl -s --connect-timeout 3 "http://ip-api.com/json/8.8.8.8" >/dev/null && \
		echo "  ‚úÖ ip-api.com accesible" || \
		echo "  ‚ùå ip-api.com no accesible"

verify:
	@echo "$(BLUE)üîç Verificando integridad del sistema...$(NC)"
	@echo "$(YELLOW)Archivos principales:$(NC)"
	@for file in $(PROMISCUOUS_AGENT) $(GEOIP_ENRICHER) $(ML_DETECTOR) $(DASHBOARD) $(FIREWALL_AGENT); do \
		if [ -f "$$file" ]; then \
			echo "  ‚úÖ $$file"; \
		else \
			echo "  ‚ùå $$file falta"; \
		fi \
	done
	@echo "$(YELLOW)Configuraciones:$(NC)"
	@for config in $(PROMISCUOUS_CONFIG) $(GEOIP_CONFIG) $(ML_CONFIG) $(DASHBOARD_CONFIG) $(FIREWALL_CONFIG) $(DASHBOARD_FIREWALL_CONFIG) $(FIREWALL_AGENT_RULES_CONFIG); do \
		if [ -f "$config" ]; then \
			echo "  ‚úÖ $config"; \
		else \
			echo "  ‚ùå $config falta - creando configuraci√≥n b√°sica..."; \
			if echo "$config" | grep -q "firewall_rules_agent"; then \
				mkdir -p config; \
				echo '{"rules": [], "enabled": true, "mode": "agent"}' > "$config"; \
				echo "  ‚úÖ $config creado"; \
			elif echo "$config" | grep -q "firewall_rules_dashboard"; then \
				mkdir -p config; \
				echo '{"dashboard_rules": [], "monitoring": true, "mode": "dashboard"}' > "$config"; \
				echo "  ‚úÖ $config creado"; \
			elif echo "$config" | grep -q "dashboard_config"; then \
				echo '{"port": 8080, "host": "localhost", "debug": false}' > "$config"; \
				echo "  ‚úÖ $config creado"; \
			elif echo "$config" | grep -q "simple_firewall_agent_config"; then \
				echo '{"agent_id": "firewall_001", "enabled": true, "log_level": "INFO"}' > "$config"; \
				echo "  ‚úÖ $config creado"; \
			fi \
		fi \
	done
	@echo "$(YELLOW)Permisos:$(NC)"
	@sudo -n iptables -L >/dev/null 2>&1 && echo "  ‚úÖ Permisos firewall OK" || echo "  ‚ùå Permisos firewall faltan (ejecutar: make setup-perms)"
	@echo "$(YELLOW)Dependencias:$(NC)"
	@$(MAKE) check-deps 2>/dev/null | grep -E "(‚úÖ|‚ùå)" | sed 's/^/  /'

clean:
	@echo "$(YELLOW)üßπ Limpiando sistema...$(NC)"
	@$(MAKE) stop 2>/dev/null || true
	@echo "  üóëÔ∏è  Removiendo entorno virtual..."
	@rm -rf $(VENV_NAME)
	@echo "  üóëÔ∏è  Limpiando archivos Python..."
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@find . -name "*.pyc" -delete 2>/dev/null || true
	@find . -name "*.pyo" -delete 2>/dev/null || true
	@echo "  üóëÔ∏è  Limpiando directorios temporales..."
	@rm -rf $(PIDS_DIR) $(LOGS_DIR) $(DATA_DIR) $(MODELS_DIR)
	@echo "$(GREEN)‚úÖ Limpieza completada$(NC)"

# =============================================================================
# GESTI√ìN DEL SISTEMA PRINCIPAL
# =============================================================================
start: install verify check-geoip stop
	@echo "$(GREEN)üöÄ Iniciando Sistema Autoinmune Digital v2.0...$(NC)"
	@echo "$(CYAN)================================================$(NC)"
	@echo "$(PURPLE)Branch: $(BRANCH)$(NC)"
	@echo ""
	@echo "$(BLUE)üîÑ Iniciando componentes en orden secuencial...$(NC)"
	@echo "$(BLUE)üìÅ Verificando archivos de configuraci√≥n JSON...$(NC)"
	@test -f $(DASHBOARD_CONFIG) || (echo "$(YELLOW)‚ö†Ô∏è  Creando $(DASHBOARD_CONFIG)...$(NC)" && echo '{"port": 8080, "host": "localhost", "debug": false}' > $(DASHBOARD_CONFIG))
	@test -f $(DASHBOARD_FIREWALL_CONFIG) || (echo "$(YELLOW)‚ö†Ô∏è  Creando $(DASHBOARD_FIREWALL_CONFIG)...$(NC)" && mkdir -p config && echo '{"dashboard_rules": [], "monitoring": true, "mode": "dashboard"}' > $(DASHBOARD_FIREWALL_CONFIG))
	@test -f $(FIREWALL_CONFIG) || (echo "$(YELLOW)‚ö†Ô∏è  Creando $(FIREWALL_CONFIG)...$(NC)" && echo '{"agent_id": "firewall_001", "enabled": true, "log_level": "INFO"}' > $(FIREWALL_CONFIG))
	@test -f $(FIREWALL_AGENT_RULES_CONFIG) || (echo "$(YELLOW)‚ö†Ô∏è  Creando $(FIREWALL_AGENT_RULES_CONFIG)...$(NC)" && mkdir -p config && echo '{"rules": [], "enabled": true, "mode": "agent"}' > $(FIREWALL_AGENT_RULES_CONFIG))
	@echo ""

	@echo "$(BLUE)1. üõ°Ô∏è  Firewall Agent (Puerto $(FIREWALL_PORT)) con $(FIREWALL_CONFIG) $(FIREWALL_AGENT_RULES_CONFIG)...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) $(FIREWALL_AGENT) $(FIREWALL_CONFIG) $(FIREWALL_AGENT_RULES_CONFIG) > $(FIREWALL_LOG) 2>&1 & echo $! > $(FIREWALL_PID)
	@sleep 3

	@echo "$(BLUE)2. üïµÔ∏è  Promiscuous Agent ‚Üí Puerto $(CAPTURE_PORT)...$(NC)"
	@sudo bash -c '$(PYTHON_VENV) $(PROMISCUOUS_AGENT) $(PROMISCUOUS_CONFIG) > $(PROMISCUOUS_LOG) 2>&1 & echo $$! > $(PROMISCUOUS_PID)'
	@sleep 3
	@echo "üîç Verificando PID promiscuous_agent..."
	@if [ -f $(PROMISCUOUS_PID) ]; then \
		PID=$$(cat $(PROMISCUOUS_PID)); \
		if ps -p $$PID > /dev/null 2>&1; then \
			echo "‚úÖ Promiscuous Agent iniciado (PID: $$PID)"; \
		else \
			echo "üîÑ Buscando PID real..."; \
			REAL_PID=$$(pgrep -f "$(PROMISCUOUS_AGENT)" | head -1); \
			if [ -n "$$REAL_PID" ]; then \
				echo "‚úÖ PID real encontrado: $$REAL_PID"; \
				echo $$REAL_PID > $(PROMISCUOUS_PID); \
			else \
				echo "‚ùå Promiscuous Agent no encontrado"; \
			fi \
		fi \
	fi

	@echo "$(BLUE)3. üåç GeoIP Enricher ($(CAPTURE_PORT) ‚Üí $(GEOIP_PORT))...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) $(GEOIP_ENRICHER) $(GEOIP_CONFIG) > $(GEOIP_LOG) 2>&1 & echo $$! > $(GEOIP_PID)
	@sleep 3

	@echo "$(BLUE)4. ü§ñ ML Detector ($(GEOIP_PORT) ‚Üí $(ML_PORT)) [‚ö†Ô∏è Refinando]...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) $(ML_DETECTOR) $(ML_CONFIG) > $(ML_LOG) 2>&1 & echo $$! > $(ML_PID)
	@sleep 3

	@echo "$(BLUE)5. üìä Dashboard ($(ML_PORT) ‚Üí UI $(DASHBOARD_WEB_PORT) ‚Üí $(FIREWALL_PORT)) con $(DASHBOARD_CONFIG) $(DASHBOARD_FIREWALL_CONFIG) [üîÑ Mejorando]...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) $(DASHBOARD) $(DASHBOARD_CONFIG) $(DASHBOARD_FIREWALL_CONFIG) > $(DASHBOARD_LOG) 2>&1 & echo $! > $(DASHBOARD_PID)
	@sleep 5

	@echo ""
	@echo "$(GREEN)üéâ SISTEMA OPERACIONAL$(NC)"
	@echo "$(CYAN)========================$(NC)"
	@echo "$(YELLOW)üìä Dashboard Principal: http://localhost:$(DASHBOARD_WEB_PORT)$(NC)"
	@echo "$(YELLOW)üõ°Ô∏è  Pipeline: promiscuous ‚Üí geoip ‚Üí ml ‚Üí dashboard ‚Üí firewall$(NC)"
	@echo "$(YELLOW)üîê Cifrado: AES-256-GCM activo$(NC)"
	@echo "$(YELLOW)üì° Captura: Modo promiscuo activo$(NC)"
	@echo "$(YELLOW)üåç GeoIP: Enriquecimiento geogr√°fico$(NC)"
	@echo "$(YELLOW)ü§ñ ML: Detecci√≥n de anomal√≠as$(NC)"
	@echo "$(YELLOW)‚öôÔ∏è  Configuraciones JSON:$(NC)"
	@echo "$(YELLOW)   ‚Ä¢ Firewall Agent: $(FIREWALL_CONFIG)$(NC)"
	@echo "$(YELLOW)   ‚Ä¢ Dashboard: $(DASHBOARD_CONFIG)$(NC)"
	@echo ""
	@echo "$(PURPLE)üí° Issues conocidos en desarrollo:$(NC)"
	@echo "$(PURPLE)   ‚Ä¢ Click-to-block en dashboard (pr√≥xima semana)$(NC)"
	@echo "$(PURPLE)   ‚Ä¢ ML classification tuning (sprint actual)$(NC)"
	@echo "$(PURPLE)   ‚Ä¢ Auto-respuesta firewall (pr√≥ximo sprint)$(NC)"
	@echo ""
	@echo "$(PURPLE)   ‚Ä¢ Recomendacion. Arrancar el script monitor_autoinmune.sh despu√©s de darle permisos de ejecuci√≥n.$(NC)"
	@$(MAKE) status

start-core: install verify stop
	@echo "$(GREEN)üöÄ Iniciando componentes CORE...$(NC)"
	@test -f $(FIREWALL_CONFIG) || echo '{"agent_id": "firewall_001", "enabled": true, "log_level": "INFO"}' > $(FIREWALL_CONFIG)
	@test -f $(FIREWALL_AGENT_RULES_CONFIG) || (mkdir -p config && echo '{"rules": [], "enabled": true, "mode": "agent"}' > $(FIREWALL_AGENT_RULES_CONFIG))
	@test -f $(DASHBOARD_CONFIG) || echo '{"port": 8080, "host": "localhost", "debug": false}' > $(DASHBOARD_CONFIG)
	@test -f $(DASHBOARD_FIREWALL_CONFIG) || (mkdir -p config && echo '{"dashboard_rules": [], "monitoring": true, "mode": "dashboard"}' > $(DASHBOARD_FIREWALL_CONFIG))
	@$(ACTIVATE) && $(PYTHON_VENV) $(FIREWALL_AGENT) $(FIREWALL_CONFIG) $(FIREWALL_AGENT_RULES_CONFIG) > $(FIREWALL_LOG) 2>&1 & echo $! > $(FIREWALL_PID)
	@sleep 2
	@sudo bash -c '$(PYTHON_VENV) $(PROMISCUOUS_AGENT) $(PROMISCUOUS_CONFIG) > $(PROMISCUOUS_LOG) 2>&1 & echo $! > $(PROMISCUOUS_PID)'
	@sleep 2
	@$(ACTIVATE) && $(PYTHON_VENV) $(GEOIP_ENRICHER) $(GEOIP_CONFIG) > $(GEOIP_LOG) 2>&1 & echo $! > $(GEOIP_PID)
	@sleep 2
	@$(ACTIVATE) && $(PYTHON_VENV) $(ML_DETECTOR) $(ML_CONFIG) > $(ML_LOG) 2>&1 & echo $! > $(ML_PID)
	@sleep 2
	@$(ACTIVATE) && $(PYTHON_VENV) $(DASHBOARD) $(DASHBOARD_CONFIG) $(DASHBOARD_FIREWALL_CONFIG) > $(DASHBOARD_LOG) 2>&1 & echo $! > $(DASHBOARD_PID)
	@echo "$(GREEN)‚úÖ Componentes core iniciados$(NC)"

start-advanced:
	@echo "$(BLUE)üß† Iniciando componentes AVANZADOS...$(NC)"
	@if [ -f "$(NEURAL_TRAINER)" ]; then \
		echo "$(BLUE)ü§ñ Neural Trainer...$(NC)"; \
		$(ACTIVATE) && $(PYTHON_VENV) $(NEURAL_TRAINER) $(NEURAL_CONFIG) > $(NEURAL_LOG) 2>&1 & echo $$! > $(NEURAL_PID); \
		sleep 2; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Neural Trainer no disponible (üéØ planificado)$(NC)"; \
	fi
	@if [ -f "$(RAG_ENGINE)" ]; then \
		echo "$(BLUE)üó£Ô∏è  RAG Engine...$(NC)"; \
		$(ACTIVATE) && $(PYTHON_VENV) $(RAG_ENGINE) $(RAG_CONFIG) > $(RAG_LOG) 2>&1 & echo $$! > $(RAG_PID); \
		sleep 2; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  RAG Engine no disponible (üéØ en dise√±o)$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ Componentes avanzados iniciados$(NC)"

start-bg: install verify check-geoip stop
	@echo "$(GREEN)üöÄ Iniciando sistema (background mode)...$(NC)"
	@test -f $(FIREWALL_CONFIG) || (mkdir -p config && echo '{"rules": [], "enabled": true, "mode": "agent"}' > $(FIREWALL_CONFIG))
	@test -f $(DASHBOARD_CONFIG) || (mkdir -p config && echo '{"dashboard_rules": [], "monitoring": true, "mode": "dashboard"}' > $(DASHBOARD_CONFIG))
	@$(ACTIVATE) && nohup $(PYTHON_VENV) $(FIREWALL_AGENT) $(FIREWALL_CONFIG) > $(FIREWALL_LOG) 2>&1 & echo $$! > $(FIREWALL_PID)
	@sleep 2
	@sudo bash -c 'nohup $(PYTHON_VENV) $(PROMISCUOUS_AGENT) $(PROMISCUOUS_CONFIG) > $(PROMISCUOUS_LOG) 2>&1 & echo $$! > $(PROMISCUOUS_PID)'
	@sleep 2
	@$(ACTIVATE) && nohup $(PYTHON_VENV) $(GEOIP_ENRICHER) $(GEOIP_CONFIG) > $(GEOIP_LOG) 2>&1 & echo $$! > $(GEOIP_PID)
	@sleep 2
	@$(ACTIVATE) && nohup $(PYTHON_VENV) $(ML_DETECTOR) $(ML_CONFIG) > $(ML_LOG) 2>&1 & echo $$! > $(ML_PID)
	@sleep 2
	@$(ACTIVATE) && nohup $(PYTHON_VENV) $(DASHBOARD) $(DASHBOARD_CONFIG) > $(DASHBOARD_LOG) 2>&1 & echo $$! > $(DASHBOARD_PID)
	@echo "$(GREEN)‚úÖ Sistema iniciado en background$(NC)"
	@echo "$(YELLOW)üìä Dashboard: http://localhost:$(DASHBOARD_WEB_PORT)$(NC)"

# =============================================================================
# GESTI√ìN DE PARADAS (UNIFICADA)
# =============================================================================

# Funci√≥n de parada est√°ndar (secuencial y limpia)
stop:
	@echo "$(YELLOW)üõë Deteniendo sistema...$(NC)"
	@echo "$(BLUE)Parada secuencial en orden inverso...$(NC)"

	# Metodo 1: Intentar con PIDs si existen
	@echo "üîÑ M√©todo 1: Deteniendo con PIDs..."
	@-if [ -f $(RAG_PID) ]; then echo "üó£Ô∏è  Deteniendo RAG Engine..."; kill $$(cat $(RAG_PID)) 2>/dev/null || true; rm -f $(RAG_PID); fi
	@-if [ -f $(NEURAL_PID) ]; then echo "ü§ñ Deteniendo Neural Trainer..."; kill $$(cat $(NEURAL_PID)) 2>/dev/null || true; rm -f $(NEURAL_PID); fi
	@-if [ -f $(DASHBOARD_PID) ]; then echo "üìä Deteniendo Dashboard..."; kill $$(cat $(DASHBOARD_PID)) 2>/dev/null || true; rm -f $(DASHBOARD_PID); fi
	@-if [ -f $(ML_PID) ]; then echo "ü§ñ Deteniendo ML Detector..."; kill $$(cat $(ML_PID)) 2>/dev/null || true; rm -f $(ML_PID); fi
	@-if [ -f $(GEOIP_PID) ]; then echo "üåç Deteniendo GeoIP Enricher..."; kill $$(cat $(GEOIP_PID)) 2>/dev/null || true; rm -f $(GEOIP_PID); fi
	@-if [ -f $(PROMISCUOUS_PID) ]; then echo "üïµÔ∏è  Deteniendo Promiscuous Agent..."; kill $$(cat $(PROMISCUOUS_PID)) 2>/dev/null || true; sudo kill $$(cat $(PROMISCUOUS_PID)) 2>/dev/null || true; rm -f $(PROMISCUOUS_PID); fi
	@-if [ -f $(FIREWALL_PID) ]; then echo "üõ°Ô∏è  Deteniendo Firewall Agent..."; kill $$(cat $(FIREWALL_PID)) 2>/dev/null || true; rm -f $(FIREWALL_PID); fi
	@sleep 2

	# M√©todo 2: pkill por nombre de proceso (m√°s agresivo)
	@echo "üîÑ M√©todo 2: pkill por patr√≥n..."
	@-echo "üìä Matando Dashboard..."
	@-pkill -f "real_zmq_dashboard_with_firewall" 2>/dev/null || true
	@-echo "ü§ñ Matando ML Detector..."
	@-pkill -f "lightweight_ml_detector" 2>/dev/null || true
	@-echo "üåç Matando GeoIP Enricher..."
	@-pkill -f "geoip_enricher" 2>/dev/null || true
	@-echo "üïµÔ∏è  Matando Promiscuous Agent..."
	@-pkill -f "promiscuous_agent" 2>/dev/null || true
	@-sudo pkill -f "promiscuous_agent" 2>/dev/null || true
	@-echo "üõ°Ô∏è  Matando Firewall Agent..."
	@-pkill -f "simple_firewall_agent" 2>/dev/null || true
	@sleep 2

	# M√©todo 3: SIGKILL si siguen activos (nuclear)
	@echo "üîÑ M√©todo 3: SIGKILL nuclear..."
	@-pkill -9 -f "real_zmq_dashboard_with_firewall" 2>/dev/null || true
	@-pkill -9 -f "lightweight_ml_detector" 2>/dev/null || true
	@-pkill -9 -f "geoip_enricher" 2>/dev/null || true
	@-pkill -9 -f "promiscuous_agent" 2>/dev/null || true
	@-sudo pkill -9 -f "promiscuous_agent" 2>/dev/null || true
	@-pkill -9 -f "simple_firewall_agent" 2>/dev/null || true

	# Limpiar archivos PID
	@echo "üßπ Limpiando PIDs..."
	@-rm -f $(PIDS_DIR)/*.pid

	@echo "$(GREEN)‚úÖ Sistema detenido correctamente$(NC)"

# Comando de emergency stop (nuclear) - VERSI√ìN √öNICA Y MEJORADA
stop-nuclear:
	@echo "$(RED)üö® PARADA NUCLEAR ACTIVADA$(NC)"
	@echo "$(RED)==============================$(NC)"

	# Matar TODOS los procesos Python relacionados
	@echo "üíÄ Matando todos los procesos Python del sistema..."
	@-ps aux | grep -E "python.*upgraded|python.*promiscuous|python.*geoip|python.*ml_detector|python.*dashboard|python.*firewall" | grep -v grep | awk '{print $$2}' | xargs -r kill -9 2>/dev/null || true
	@-ps aux | grep -E "python.*upgraded|python.*promiscuous|python.*geoip|python.*ml_detector|python.*dashboard|python.*firewall" | grep -v grep | awk '{print $$2}' | xargs -r sudo kill -9 2>/dev/null || true

	# Limpiar procesos sudo colgados
	@echo "üßπ Limpiando procesos sudo..."
	@-sudo pkill -9 -f "python.*promiscuous" 2>/dev/null || true

	# Limpiar PIDs
	@echo "üóëÔ∏è  Limpiando archivos PID..."
	@-rm -f $(PIDS_DIR)/*.pid

	# Limpiar puertos ZeroMQ colgados
	@echo "üîå Liberando puertos ZeroMQ..."
	@-lsof -ti:5559,5560,5561,5562,8080 2>/dev/null | xargs -r kill -9 2>/dev/null || true

	@echo "$(GREEN)‚úÖ Parada nuclear completada$(NC)"

restart: stop
	@sleep 3
	@$(MAKE) start

# =============================================================================
# FUNCIONES DE INICIO MEJORADAS
# =============================================================================

# Start mejorado con PIDs robustos
start-improved: install verify check-geoip stop
	@echo "$(GREEN)üöÄ Iniciando Sistema Autoinmune Digital v2.0 (Mejorado)...$(NC)"
	@echo "$(CYAN)========================================================$(NC)"

	@echo "$(BLUE)1. üõ°Ô∏è  Firewall Agent...$(NC)"
	@test -f $(FIREWALL_CONFIG) || (mkdir -p config && echo '{"rules": [], "enabled": true, "mode": "agent"}' > $(FIREWALL_CONFIG))
	@$(ACTIVATE) && $(PYTHON_VENV) $(FIREWALL_AGENT) $(FIREWALL_CONFIG) > $(FIREWALL_LOG) 2>&1 & echo $$! > $(FIREWALL_PID)
	@sleep 3

	@echo "$(BLUE)2. üïµÔ∏è  Promiscuous Agent (con sudo)...$(NC)"
	@sudo bash -c '$(PYTHON_VENV) $(PROMISCUOUS_AGENT) $(PROMISCUOUS_CONFIG) > $(PROMISCUOUS_LOG) 2>&1 & echo $$! > $(PROMISCUOUS_PID)'
	@sleep 3

	@echo "$(BLUE)3. üåç GeoIP Enricher...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) $(GEOIP_ENRICHER) $(GEOIP_CONFIG) > $(GEOIP_LOG) 2>&1 & echo $$! > $(GEOIP_PID)
	@sleep 3

	@echo "$(BLUE)4. ü§ñ ML Detector...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) $(ML_DETECTOR) $(ML_CONFIG) > $(ML_LOG) 2>&1 & echo $$! > $(ML_PID)
	@sleep 3

	@echo "$(BLUE)5. üìä Dashboard...$(NC)"
	@test -f $(DASHBOARD_CONFIG) || (mkdir -p config && echo '{"dashboard_rules": [], "monitoring": true, "mode": "dashboard"}' > $(DASHBOARD_CONFIG))
	@$(ACTIVATE) && $(PYTHON_VENV) $(DASHBOARD) $(DASHBOARD_CONFIG) > $(DASHBOARD_LOG) 2>&1 & echo $$! > $(DASHBOARD_PID)
	@sleep 5

	@echo ""
	@echo "$(GREEN)üéâ VERIFICANDO ESTADO...$(NC)"
	@$(MAKE) verify-start

# Verificador de inicio
verify-start:
	@echo "$(CYAN)üîç Verificando componentes iniciados...$(NC)"
	@components_ok=0; \
	total_components=5; \
	for pidfile in $(FIREWALL_PID) $(PROMISCUOUS_PID) $(GEOIP_PID) $(ML_PID) $(DASHBOARD_PID); do \
		if [ -f "$$pidfile" ]; then \
			PID=$$(cat $$pidfile); \
			if ps -p $$PID > /dev/null 2>&1; then \
				components_ok=$$((components_ok + 1)); \
				echo "  ‚úÖ $$(basename $$pidfile .pid): PID $$PID activo"; \
			else \
				echo "  ‚ùå $$(basename $$pidfile .pid): PID $$PID muerto"; \
			fi \
		else \
			echo "  ‚ùå $$(basename $$pidfile .pid): Sin PID file"; \
		fi \
	done; \
	echo ""; \
	echo "üìä Estado: $$components_ok/$$total_components componentes activos"; \
	if [ "$$components_ok" -eq "$$total_components" ]; then \
		echo "$(GREEN)üéâ SISTEMA COMPLETAMENTE OPERACIONAL$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Sistema parcialmente operacional$(NC)"; \
	fi

# =============================================================================
# MONITORIZACI√ìN Y DEBUGGING
# =============================================================================
status:
	@echo "$(CYAN)üìä Estado del Sistema Autoinmune$(NC)"
	@echo "$(CYAN)===================================$(NC)"
	@echo "$(YELLOW)üîß Componentes Core:$(NC)"
	@pgrep -f "$(FIREWALL_AGENT)" >/dev/null && echo "  üõ°Ô∏è  Firewall Agent: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  üõ°Ô∏è  Firewall Agent: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "$(PROMISCUOUS_AGENT)" >/dev/null && echo "  üïµÔ∏è  Promiscuous Agent: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  üïµÔ∏è  Promiscuous Agent: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "$(GEOIP_ENRICHER)" >/dev/null && echo "  üåç GeoIP Enricher: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  üåç GeoIP Enricher: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "$(ML_DETECTOR)" >/dev/null && echo "  ü§ñ ML Detector: $(GREEN)‚úÖ Ejecut√°ndose$(NC) $(YELLOW)(refinando)$(NC)" || echo "  ü§ñ ML Detector: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "$(DASHBOARD)" >/dev/null && echo "  üìä Dashboard: $(GREEN)‚úÖ Ejecut√°ndose$(NC) $(YELLOW)(http://localhost:$(DASHBOARD_WEB_PORT))$(NC)" || echo "  üìä Dashboard: $(RED)‚≠ï Detenido$(NC)"
	@echo ""
	@echo "$(YELLOW)üß† Componentes Avanzados:$(NC)"
	@pgrep -f "$(NEURAL_TRAINER)" >/dev/null && echo "  ü§ñ Neural Trainer: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  ü§ñ Neural Trainer: $(BLUE)üéØ No disponible$(NC)"
	@pgrep -f "$(RAG_ENGINE)" >/dev/null && echo "  üó£Ô∏è  RAG Engine: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  üó£Ô∏è  RAG Engine: $(BLUE)üéØ No disponible$(NC)"
	@echo ""
	@echo "$(YELLOW)‚öôÔ∏è  Configuraciones JSON:$(NC)"
	@test -f $(FIREWALL_CONFIG) && echo "  ‚úÖ Firewall Agent Config: $(FIREWALL_CONFIG)" || echo "  ‚ùå Firewall Agent Config: $(FIREWALL_CONFIG) falta"
	@test -f $(DASHBOARD_CONFIG) && echo "  ‚úÖ Dashboard Config: $(DASHBOARD_CONFIG)" || echo "  ‚ùå Dashboard Config: $(DASHBOARD_CONFIG) falta"
	@echo ""
	@echo "$(YELLOW)üåê Puertos de Red:$(NC)"
	@lsof -i :$(CAPTURE_PORT) >/dev/null 2>&1 && echo "  üì° Captura ($(CAPTURE_PORT)): $(GREEN)ACTIVO$(NC)" || echo "  üì° Captura ($(CAPTURE_PORT)): $(RED)INACTIVO$(NC)"
	@lsof -i :$(GEOIP_PORT) >/dev/null 2>&1 && echo "  üåç GeoIP ($(GEOIP_PORT)): $(GREEN)ACTIVO$(NC)" || echo "  üåç GeoIP ($(GEOIP_PORT)): $(RED)INACTIVO$(NC)"
	@lsof -i :$(ML_PORT) >/dev/null 2>&1 && echo "  ü§ñ ML ($(ML_PORT)): $(GREEN)ACTIVO$(NC)" || echo "  ü§ñ ML ($(ML_PORT)): $(RED)INACTIVO$(NC)"
	@lsof -i :$(FIREWALL_PORT) >/dev/null 2>&1 && echo "  üõ°Ô∏è  Firewall ($(FIREWALL_PORT)): $(GREEN)ACTIVO$(NC)" || echo "  üõ°Ô∏è  Firewall ($(FIREWALL_PORT)): $(RED)INACTIVO$(NC)"
	@lsof -i :$(DASHBOARD_WEB_PORT) >/dev/null 2>&1 && echo "  üìä Dashboard Web ($(DASHBOARD_WEB_PORT)): $(GREEN)ACTIVO$(NC)" || echo "  üìä Dashboard Web ($(DASHBOARD_WEB_PORT)): $(RED)INACTIVO$(NC)"
	@lsof -i :$(RAG_WEB_PORT) >/dev/null 2>&1 && echo "  üó£Ô∏è  RAG Web ($(RAG_WEB_PORT)): $(GREEN)ACTIVO$(NC)" || echo "  üó£Ô∏è  RAG Web ($(RAG_WEB_PORT)): $(BLUE)üéØ Planificado$(NC)"

# Status mejorado con PIDs
status-detailed:
	@echo "$(CYAN)üìä Estado Detallado del Sistema$(NC)"
	@echo "$(CYAN)================================$(NC)"
	@echo ""

	@echo "$(YELLOW)üîß PIDs guardados:$(NC)"
	@if [ -d "$(PIDS_DIR)" ]; then \
		ls -la $(PIDS_DIR)/*.pid 2>/dev/null | awk '{print "  üìÑ " $$9 ": " $$5 " bytes"}' || echo "  ‚ö†Ô∏è  No hay PIDs guardados"; \
	else \
		echo "  ‚ùå Directorio PIDs no existe"; \
	fi
	@echo ""

	@echo "$(YELLOW)üèÉ Procesos activos:$(NC)"
	@ps aux | grep -E "python.*upgraded|python.*promiscuous|python.*geoip|python.*ml_detector|python.*dashboard|python.*firewall" | grep -v grep | awk '{print "  üÜî PID " $$2 " (" $$3 "% CPU): " $$11 " " $$12}' || echo "  ‚ö†Ô∏è  No hay procesos activos"
	@echo ""

	@echo "$(YELLOW)üåê Puertos en uso:$(NC)"
	@lsof -i :5559,5560,5561,5562,8080 2>/dev/null | grep LISTEN | awk '{print "  üîå Puerto " $$9 ": " $$1 " (PID " $$2 ")"}' || echo "  ‚ö†Ô∏è  No hay puertos activos"

monitor:
	@echo "$(CYAN)üìä Monitor del Sistema$(NC)"
	@echo "$(CYAN)=======================$(NC)"
	@$(MAKE) status
	@echo ""
	@echo "$(YELLOW)üíπ Actividad Reciente (√∫ltimas 3 l√≠neas):$(NC)"
	@if [ -f $(FIREWALL_LOG) ]; then echo "üõ°Ô∏è  $(FIREWALL_AGENT):"; tail -3 $(FIREWALL_LOG) | sed 's/^/    /' | head -3; echo ""; fi
	@if [ -f $(GEOIP_LOG) ]; then echo "üåç $(GEOIP_ENRICHER):"; tail -3 $(GEOIP_LOG) | sed 's/^/    /' | head -3; echo ""; fi
	@if [ -f $(ML_LOG) ]; then echo "ü§ñ $(ML_DETECTOR):"; tail -3 $(ML_LOG) | sed 's/^/    /' | head -3; echo ""; fi
	@if [ -f $(DASHBOARD_LOG) ]; then echo "üìä $(DASHBOARD):"; tail -3 $(DASHBOARD_LOG) | sed 's/^/    /' | head -3; fi

logs:
	@echo "$(CYAN)üìã Logs del Sistema$(NC)"
	@echo "$(CYAN)====================$(NC)"
	@if [ -f $(FIREWALL_LOG) ]; then echo "$(YELLOW)=== üõ°Ô∏è  Firewall Agent ===$(NC)"; tail -10 $(FIREWALL_LOG); echo ""; fi
	@if [ -f $(PROMISCUOUS_LOG) ]; then echo "$(YELLOW)=== üïµÔ∏è  Promiscuous Agent ===$(NC)"; tail -10 $(PROMISCUOUS_LOG); echo ""; fi
	@if [ -f $(GEOIP_LOG) ]; then echo "$(YELLOW)=== üåç GeoIP Enricher ===$(NC)"; tail -10 $(GEOIP_LOG); echo ""; fi
	@if [ -f $(ML_LOG) ]; then echo "$(YELLOW)=== ü§ñ ML Detector ===$(NC)"; tail -10 $(ML_LOG); echo ""; fi
	@if [ -f $(DASHBOARD_LOG) ]; then echo "$(YELLOW)=== üìä Dashboard ===$(NC)"; tail -10 $(DASHBOARD_LOG); fi
	@if [ -f $(NEURAL_LOG) ]; then echo "$(YELLOW)=== ü§ñ Neural Trainer ===$(NC)"; tail -10 $(NEURAL_LOG); echo ""; fi
	@if [ -f $(RAG_LOG) ]; then echo "$(YELLOW)=== üó£Ô∏è  RAG Engine ===$(NC)"; tail -10 $(RAG_LOG); fi

logs-tail:
	@echo "$(CYAN)üìã Siguiendo logs en tiempo real...$(NC)"
	@echo "$(YELLOW)Ctrl+C para salir$(NC)"
	@tail -f $(LOGS_DIR)/*.log 2>/dev/null | grep --line-buffered -E "(üìä|üì®|üì§|ERROR|WARNING|üî•|üåç|ü§ñ|üì°)" | while read line; do echo "[$(date '+%H:%M:%S')] $$line"; done

logs-errors:
	@echo "$(CYAN)üö® Logs de Errores$(NC)"
	@echo "$(CYAN)==================$(NC)"
	@grep -i "error\|exception\|traceback\|failed" $(LOGS_DIR)/*.log 2>/dev/null | tail -20 | sed 's/^/  /' || echo "$(GREEN)‚úÖ No se encontraron errores recientes$(NC)"

# =============================================================================
# UTILIDADES Y DESARROLLO
# =============================================================================
show-dashboard:
	@echo "$(BLUE)üåê Abriendo dashboard web...$(NC)"
	@echo "$(YELLOW)URL: http://localhost:$(DASHBOARD_WEB_PORT)$(NC)"
	@which open >/dev/null && open http://localhost:$(DASHBOARD_WEB_PORT) || \
		which xdg-open >/dev/null && xdg-open http://localhost:$(DASHBOARD_WEB_PORT) || \
		echo "üí° Abrir manualmente: http://localhost:$(DASHBOARD_WEB_PORT)"

debug:
	@echo "$(BLUE)üîß Modo Debug Interactivo$(NC)"
	@echo "$(BLUE)============================$(NC)"
	@echo "$(YELLOW)Sistema:$(NC)"
	@$(MAKE) status
	@echo ""
	@echo "$(YELLOW)Logs recientes:$(NC)"
	@$(MAKE) logs-errors
	@echo ""
	@echo "$(YELLOW)Puertos en uso:$(NC)"
	@lsof -i :$(CAPTURE_PORT),$(GEOIP_PORT),$(ML_PORT),$(FIREWALL_PORT),$(DASHBOARD_WEB_PORT) 2>/dev/null || echo "  No hay puertos activos"
	@echo ""
	@echo "$(YELLOW)Procesos Python:$(NC)"
	@ps aux | grep -E "(python.*upgraded|python.*$(PROMISCUOUS_AGENT)|python.*$(DASHBOARD))" | grep -v grep || echo "  No hay procesos activos"

test:
	@echo "$(BLUE)üß™ Ejecutando tests...$(NC)"
	@if [ -d "tests" ]; then \
		$(ACTIVATE) && $(PYTHON_VENV) -m pytest tests/ -v; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Directorio tests/ no encontrado$(NC)"; \
		echo "$(BLUE)üí° Creando estructura de tests b√°sica...$(NC)"; \
		mkdir -p tests; \
		echo "# Tests del Sistema Autoinmune" > tests/README.md; \
		echo "$(GREEN)‚úÖ Estructura creada en tests/$(NC)"; \
	fi

benchmark:
	@echo "$(BLUE)üìä Ejecutando benchmarks...$(NC)"
	@echo "$(YELLOW)Verificando rendimiento del sistema...$(NC)"
	@$(MAKE) status
	@echo ""
	@echo "$(YELLOW)Uso de CPU por proceso:$(NC)"
	@ps aux | grep -E "(python.*upgraded|python.*promiscuous|python.*geoip|python.*ml_detector|python.*dashboard)" | grep -v grep | awk '{print "  " $$11 ": " $$3 "% CPU, " $$4 "% MEM"}' || echo "  No hay procesos activos"
	@echo ""
	@echo "$(YELLOW)Uso de memoria:$(NC)"
	@free -h | sed 's/^/  /' 2>/dev/null || echo "  No disponible en macOS"
	@echo ""
	@echo "$(YELLOW)Conexiones de red activas:$(NC)"
	@netstat -tuln 2>/dev/null | grep -E ":($(CAPTURE_PORT)|$(GEOIP_PORT)|$(ML_PORT)|$(FIREWALL_PORT)|$(DASHBOARD_WEB_PORT))" | sed 's/^/  /' || echo "  No hay conexiones activas"

# =============================================================================
# COMANDOS DE DESARROLLO
# =============================================================================
dev-start: start-core
	@echo "$(PURPLE)üîß Modo desarrollo activado$(NC)"
	@echo "$(PURPLE)Core components iniciados$(NC)"
	@echo "$(PURPLE)Dashboard: http://localhost:$(DASHBOARD_WEB_PORT)$(NC)"

dev-stop: stop
	@echo "$(PURPLE)üîß Modo desarrollo detenido$(NC)"

dev-restart: dev-stop dev-start

# =============================================================================
# COMANDO R√ÅPIDO
# =============================================================================
quick: setup install setup-perms start show-dashboard
	@echo ""
	@echo "$(GREEN)üéâ QUICK START COMPLETADO$(NC)"
	@echo "$(GREEN)============================$(NC)"
	@echo "$(YELLOW)El Sistema Autoinmune Digital est√° operativo!$(NC)"
	@echo ""
	@echo "$(CYAN)üìä Dashboard: http://localhost:$(DASHBOARD_WEB_PORT)$(NC)"
	@echo "$(CYAN)üîß Estado: make status$(NC)"
	@echo "$(CYAN)üìã Logs: make logs$(NC)"
	@echo "$(CYAN)üõë Parar: make stop$(NC)"