# =============================================================================
# üõ°Ô∏è Upgraded Happiness - Sistema Autoinmune Digital v2.0 (POST-HOUSEKEEPING)
# =============================================================================
# Arquitectura: promiscuous_agent ‚Üí geoip_enricher ‚Üí ml_detector ‚Üí dashboard ‚Üí firewall_agent
# Branch: housekeeping/file-organization
# Estructura: 142 archivos organizados, 0 p√©rdidas | Human-AI Collaborative Project
# =============================================================================

SHELL := /bin/bash
.DEFAULT_GOAL := help

# =============================================================================
# COLORES Y EMOJIS
# =============================================================================
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
PURPLE = \033[0;35m
CYAN = \033[0;36m
NC = \033[0m # No Color

# =============================================================================
# CONFIGURACI√ìN DEL PROYECTO POST-HOUSEKEEPING
# =============================================================================
# Informaci√≥n del proyecto
PROJECT_NAME = upgraded-happiness
PROJECT_VERSION = v2.0.0-post-housekeeping
BRANCH = housekeeping/file-organization
REPO_URL = https://github.com/alonsoir/upgraded-happiness

# Python y Entorno
PYTHON = python3
VENV_NAME = upgraded_happiness_venv
VENV_BIN = $(VENV_NAME)/bin
PYTHON_VENV = $(VENV_BIN)/python
PIP_VENV = $(VENV_BIN)/pip
ACTIVATE = source $(VENV_BIN)/activate

# =============================================================================
# PROTOBUF CONFIGURATION (NUEVA ESTRUCTURA AUTOMATIZADA)
# =============================================================================
# Variables Protobuf (como solicitado por Alonso)
PROTOBUF_DIR = protocols/current
SCHEMA_NETWORK_EXTENDED = $(PROTOBUF_DIR)/network_event_extended_v3.proto
SCHEMA_FIREWALL_COMMAND = $(PROTOBUF_DIR)/firewall_commands.proto
SCHEMA_NETWORK_EVENT = $(PROTOBUF_DIR)/network_event.proto
SCHEMA_NETWORK_EXTENDED_V2 = $(PROTOBUF_DIR)/network_event_extended_v2.proto

# Archivos generados (se colocan en el mismo directorio que los .proto)
PROTOBUF_COMPILED = $(PROTOBUF_DIR)/network_event_extended_v3_pb2.py \
                   $(PROTOBUF_DIR)/firewall_commands_pb2.py \
                   $(PROTOBUF_DIR)/network_event_pb2.py \
                   $(PROTOBUF_DIR)/network_event_extended_v2_pb2.py

# =============================================================================
# COMPONENTES PRINCIPALES (ESTRUCTURA POST-HOUSEKEEPING)
# =============================================================================
# Core Pipeline Components (rutas actualizadas ‚Üí core/)
PROMISCUOUS_AGENT = core/promiscuous_agent.py
GEOIP_ENRICHER = core/geoip_enricher.py
ML_DETECTOR = core/lightweight_ml_detector.py
DASHBOARD = core/real_zmq_dashboard_with_firewall.py
FIREWALL_AGENT = core/simple_firewall_agent.py

# üåü JOYA √âPICA: H√≠brido Sniffer + ML (90% del proyecto demostrado)
FIXED_SERVICE_SNIFFER = core/fixed_service_sniffer.py

# üÜï NUEVOS COMPONENTES DESCUBIERTOS POST-HOUSEKEEPING
NETWORK_FEATURE_EXTRACTOR = core/enhanced_network_feature_extractor.py
FAST_EJECTOR_LAYER = core/fast_ejector_layer.py

# Experimental (no producci√≥n)
PROMISCUOUS_AGENT_V2 = core/promiscuous_agent_v2.py

# Advanced Components (ML Pipeline) - SIN COMENTARIOS INLINE
NEURAL_TRAINER = ml_pipeline/trainers/advanced_trainer.py
SNIFFER_RETRAINER = ml_pipeline/trainers/sniffer_compatible_retrainer.py
RAG_ENGINE = autoinmune_rag_engine.py

# =============================================================================
# CONFIGURACIONES JSON (ESTRUCTURA ACTUALIZADA)
# =============================================================================
# Configuraciones principales (config/json/)
CONFIG_DIR = config/json
PROMISCUOUS_CONFIG = $(CONFIG_DIR)/enhanced_agent_config.json
GEOIP_CONFIG = $(CONFIG_DIR)/geoip_enricher_config.json
ML_CONFIG = $(CONFIG_DIR)/lightweight_ml_detector_config.json
DASHBOARD_CONFIG = $(CONFIG_DIR)/dashboard_config.json
FIREWALL_CONFIG = $(CONFIG_DIR)/simple_firewall_agent_config.json
NEURAL_CONFIG = $(CONFIG_DIR)/advanced_trainer_v2_config.json

# Configuraciones adicionales (segundo par√°metro)
DASHBOARD_FIREWALL_CONFIG = config/json/firewall_rules_dashboard.json
FIREWALL_AGENT_RULES_CONFIG = config/json/firewall_rules_agent.json

# =============================================================================
# DIRECTORIOS ECOSISTEMA (POST-HOUSEKEEPING)
# =============================================================================
# Directorios principales
CORE_DIR = core
ML_PIPELINE_DIR = ml_pipeline
MODELS_PRODUCTION_DIR = models/production
MODELS_ARCHIVE_DIR = models/archive
WEB_STATIC_DIR = web/static
WEB_TEMPLATES_DIR = web/templates
DATASETS_DIR = datasets
PROTOCOLS_DIR = protocols
SCRIPTS_DIR = scripts
DOCS_DIR = docs
ARCHIVE_DIR = archive

# Directorios de ejecuci√≥n
PIDS_DIR = .pids
LOGS_DIR = logs
DATA_DIR = data
INFRASTRUCTURE_DIR = infrastructure

# =============================================================================
# ARQUITECTURA DE RED (ZeroMQ) - SIN CAMBIOS
# =============================================================================
# Pipeline Ports (Flujo de datos)
CAPTURE_PORT = 5559          # promiscuous_agent ‚Üí geoip_enricher
GEOIP_PORT = 5560           # geoip_enricher ‚Üí ml_detector
ML_PORT = 5561              # ml_detector ‚Üí dashboard
FIREWALL_PORT = 5562        # dashboard ‚Üí firewall_agent

# Service Ports
DASHBOARD_WEB_PORT = 8080   # Web UI principal
RAG_WEB_PORT = 8090         # RAG Engine (pr√≥ximamente)
NEURAL_PORT = 5563          # Neural trainer (pr√≥ximamente)

# =============================================================================
# GESTI√ìN DE PROCESOS (ACTUALIZADA)
# =============================================================================
# PIDs para gesti√≥n de procesos
PROMISCUOUS_PID = $(PIDS_DIR)/promiscuous_agent.pid
GEOIP_PID = $(PIDS_DIR)/geoip_enricher.pid
ML_PID = $(PIDS_DIR)/ml_detector.pid
DASHBOARD_PID = $(PIDS_DIR)/dashboard.pid
FIREWALL_PID = $(PIDS_DIR)/firewall_agent.pid
NEURAL_PID = $(PIDS_DIR)/neural_trainer.pid
RAG_PID = $(PIDS_DIR)/rag_engine.pid

# Logs para debugging
PROMISCUOUS_LOG = $(LOGS_DIR)/promiscuous_agent.log
GEOIP_LOG = $(LOGS_DIR)/geoip_enricher.log
ML_LOG = $(LOGS_DIR)/ml_detector.log
DASHBOARD_LOG = $(LOGS_DIR)/dashboard.log
FIREWALL_LOG = $(LOGS_DIR)/firewall_agent.log
NEURAL_LOG = $(LOGS_DIR)/neural_trainer.log
RAG_LOG = $(LOGS_DIR)/rag_engine.log

# Scripts de utilidad (actualizados) - SIN COMENTARIOS INLINE
NUCLEAR_STOP_SCRIPT = scripts/deployment/nuclear-stop.sh
MONITOR_SCRIPT = scripts/utils/monitor_autoinmune.sh

# =============================================================================
# PHONY DECLARATIONS
# =============================================================================
.PHONY: help setup install clean \
        compile-protobuf check-protobuf verify-protobuf-compiled check-protobuf-imports fix-protobuf-imports \
        list-imports-to-fix verify-system-ready \
        start start-bg start-core start-advanced stop stop-nuclear restart \
        status monitor logs logs-tail logs-errors \
        setup-perms verify check-geoip check-deps check-structure \
        show-dashboard show-architecture show-roadmap show-housekeeping show-epic-sniffer \
        quick debug test benchmark \
        dev-start dev-stop dev-restart \
        start-improved verify-start status-detailed create-config-dirs

# =============================================================================
# HELP Y DOCUMENTACI√ìN (ACTUALIZADA POST-HOUSEKEEPING)
# =============================================================================
help:
	@echo "$(CYAN)üß¨ Sistema Autoinmune Digital v2.0 - POST-HOUSEKEEPING$(NC)"
	@echo "$(CYAN)=====================================================$(NC)"
	@echo "$(PURPLE)Branch: $(BRANCH)$(NC)"
	@echo "$(PURPLE)Estado: 142 archivos organizados, 0 p√©rdidas$(NC)"
	@echo "$(PURPLE)Repo: $(REPO_URL)$(NC)"
	@echo ""
	@echo "$(YELLOW)üöÄ COMANDOS PRINCIPALES:$(NC)"
	@echo "  $(GREEN)make quick$(NC)              - Setup completo + Start (RECOMENDADO)"
	@echo "  $(GREEN)make compile-protobuf$(NC)   - Compilar archivos .proto (NUEVO)"
	@echo "  $(GREEN)make start$(NC)              - Iniciar sistema completo"
	@echo "  $(GREEN)make show-dashboard$(NC)     - Abrir dashboard web"
	@echo "  $(GREEN)make stop$(NC)               - Detener sistema completo"
	@echo "  $(GREEN)make status$(NC)             - Ver estado del sistema"
	@echo ""
	@echo "$(YELLOW)üì¶ SETUP Y CONFIGURACI√ìN:$(NC)"
	@echo "  setup                    - Crear entorno virtual"
	@echo "  install                  - Instalar dependencias"
	@echo "  setup-perms              - Configurar permisos sudo (iptables)"
	@echo "  check-geoip              - Verificar configuraci√≥n GeoIP"
	@echo "  check-deps               - Verificar dependencias"
	@echo "  check-structure          - Verificar estructura post-housekeeping"
	@echo "  verify                   - Verificar integridad del sistema"
	@echo "  clean                    - Limpiar todo"
	@echo ""
	@echo "$(YELLOW)üîß PROTOBUF (NUEVO):$(NC)"
	@echo "  compile-protobuf         - Compilar .proto ‚Üí .py autom√°ticamente"
	@echo "  check-protobuf           - Verificar compilaci√≥n protobuf"
	@echo ""
	@echo "$(YELLOW)üîÑ OPERACIONES AVANZADAS:$(NC)"
	@echo "  start-core               - Solo componentes core (b√°sico)"
	@echo "  start-advanced           - Componentes avanzados (ML Pipeline)"
	@echo "  start-bg                 - Iniciar en background"
	@echo "  restart                  - Reiniciar sistema completo"
	@echo "  stop-nuclear             - Parada nuclear (emergencia)"
	@echo ""
	@echo "$(YELLOW)üìä MONITORIZACI√ìN Y DEBUG:$(NC)"
	@echo "  monitor                  - Monitor tiempo real"
	@echo "  logs                     - Ver logs de todos los componentes"
	@echo "  logs-tail                - Seguir logs en tiempo real"
	@echo "  logs-errors              - Ver solo errores"
	@echo "  debug                    - Modo debug interactivo"
	@echo "  benchmark                - Ejecutar benchmarks"
	@echo ""
	@echo "  health-check             - An√°lisis completo de salud del sistema"
	@echo "  monitor-live             - Monitor en tiempo real (actualizaci√≥n cada 3s)"
	@echo "  dashboard-terminal       - Dashboard compacto en terminal"
	@echo "  test-sequence            - Verificar secuencia de arranque (dry run)"
	@echo "  generate-monitor-script  - Generar script de monitoreo avanzado"
	@echo "$(YELLOW)‚ÑπÔ∏è  INFORMACI√ìN:$(NC)"
	@echo "  show-architecture        - Mostrar arquitectura del sistema"
	@echo "  show-roadmap             - Ver roadmap y estado actual"
	@echo "  show-housekeeping        - Ver resultado housekeeping"
	@echo "  show-epic-sniffer        - Ver joya √©pica: fixed_service_sniffer.py"
	@echo "  verify-system-ready      - Verificaci√≥n completa pre-arranque"
	@echo "  list-imports-to-fix      - Listar imports protobuf a corregir"
	@echo ""
	@echo "$(CYAN)üèóÔ∏è ARQUITECTURA POST-HOUSEKEEPING:$(NC)"
	@echo "  core/ ‚Üí ml_pipeline/ ‚Üí models/production/ ‚Üí web/ ‚Üí protocols/current/"
	@echo ""
	@echo "$(CYAN)üåê SERVICIOS WEB:$(NC)"
	@echo "  Dashboard: http://localhost:$(DASHBOARD_WEB_PORT)"
	@echo "  RAG Engine: http://localhost:$(RAG_WEB_PORT) (pr√≥ximamente)"

# =============================================================================
# INFORMACI√ìN DEL SISTEMA (ACTUALIZADA)
# =============================================================================
show-architecture:
	@echo "$(CYAN)üèóÔ∏è Arquitectura Post-Housekeeping$(NC)"
	@echo "$(CYAN)==================================$(NC)"
	@echo ""
	@echo "$(YELLOW)üì° PIPELINE PRINCIPAL (core/):$(NC)"
	@echo "  1. üïµÔ∏è  $(PROMISCUOUS_AGENT) ‚Üí Puerto $(CAPTURE_PORT) (‚úÖ Principal - 36KB)"
	@echo "  2. üåç $(GEOIP_ENRICHER) ‚Üí Puerto $(GEOIP_PORT) (‚úÖ Masivo - 77KB)"
	@echo "  3. ü§ñ $(ML_DETECTOR) ‚Üí Puerto $(ML_PORT) (‚úÖ Tricapa - 51KB)"
	@echo "  4. üìä $(DASHBOARD) ‚Üí Puerto $(FIREWALL_PORT) (‚úÖ √âPICO - 158KB)"
	@echo "  5. üõ°Ô∏è  $(FIREWALL_AGENT) (‚úÖ Firewall - 53KB)"
	@echo ""
	@echo "$(YELLOW)üíé JOYAS √âPICAS - COMPONENTES ESPECIALES:$(NC)"
	@echo "  üåü $(FIXED_SERVICE_SNIFFER) - H√≠brido Scapy ‚Üí Features ‚Üí ML (33KB)"
	@echo "      üìä 20+ features via Scapy ‚Üí Modelos reentrenados"
	@echo "      ‚ö° Sin ZeroMQ/Protobuf, puro potencial demostrado"
	@echo "  üßÆ $(NETWORK_FEATURE_EXTRACTOR) - Extractor avanzado (16KB)"
	@echo "  ‚ö° $(FAST_EJECTOR_LAYER) - Componente r√°pido (3.5KB) üÜï"
	@echo ""
	@echo "$(YELLOW)üß† ML PIPELINE (ml_pipeline/):$(NC)"
	@echo "  6. ü§ñ $(NEURAL_TRAINER) ‚Üí Puerto $(NEURAL_PORT) (üîÑ Disponible)"
	@echo "  7. üîÑ $(SNIFFER_RETRAINER) (‚úÖ Reentrenamiento)"
	@echo "  8. üåê 329 sitios globales ‚Üí $(ML_PIPELINE_DIR)/data_generators/"
	@echo ""
	@echo "$(YELLOW)üíé MODELOS EN PRODUCCI√ìN:$(NC)"
	@echo "  üß† $(MODELS_PRODUCTION_DIR)/rf_production_sniffer_compatible.joblib (10.1MB)"
	@echo "  üåê $(MODELS_PRODUCTION_DIR)/web_normal_detector.joblib (2.5MB)"
	@echo "  üè¢ $(MODELS_PRODUCTION_DIR)/internal_normal_detector.joblib (2.3MB)"
	@echo ""
	@echo "$(YELLOW)üåê WEB DASHBOARD:$(NC)"
	@echo "  üìä $(WEB_STATIC_DIR)/ - Assets est√°ticos"
	@echo "  üìÑ $(WEB_TEMPLATES_DIR)/ - Templates HTML"
	@echo "  üéØ Dashboard: http://localhost:$(DASHBOARD_WEB_PORT)"

show-roadmap:
	@echo "$(CYAN)üîÆ Roadmap Post-Housekeeping$(NC)"
	@echo "$(CYAN)=============================$(NC)"
	@echo ""
	@echo "$(GREEN)‚úÖ COMPLETADO (Q3 2025):$(NC)"
	@echo "  ‚Ä¢ üèóÔ∏è  Housekeeping √©pico: 142 archivos organizados, 0 p√©rdidas"
	@echo "  ‚Ä¢ üß† Sistema tricapa ML operativo (3 modelos producci√≥n)"
	@echo "  ‚Ä¢ üåç Generaci√≥n datos √©pica: 329 sitios globales curados"
	@echo "  ‚Ä¢ üîí Protocolos ZeroMQ preservados (6 versiones)"
	@echo "  ‚Ä¢ üìö Documentation revolutionary completada"
	@echo "  ‚Ä¢ ü§ñ Human-AI collaborative methodology establecida"
	@echo ""
	@echo "$(YELLOW)üîÑ EN DESARROLLO ACTIVO (Agosto 2025):$(NC)"
	@echo "  ‚Ä¢ üîß Protobuf v3.1 integration design"
	@echo "  ‚Ä¢ üìä Dashboard-Firewall integration (click-to-block)"
	@echo "  ‚Ä¢ üîÑ Auto-reentrenamiento con ml_pipeline/"
	@echo "  ‚Ä¢ üåê Distributed system foundations"
	@echo ""
	@echo "$(BLUE)üéØ PR√ìXIMOS HITOS (Q4 2025):$(NC)"
	@echo "  ‚Ä¢ üîê Sistema distribuido con cifrado avanzado"
	@echo "  ‚Ä¢ ü§ñ RAG Engine con Claude integration"
	@echo "  ‚Ä¢ üê≥ Containerizaci√≥n K3s/Docker"
	@echo "  ‚Ä¢ üöÄ RELEASE 1.0.0 - Production Ready"
	@echo ""
	@echo "$(PURPLE)üåü FUTURO (2026):$(NC)"
	@echo "  ‚Ä¢ üß† Deep Learning models integration"
	@echo "  ‚Ä¢ üåç Multi-region deployment orchestration"
	@echo "  ‚Ä¢ üîÆ Predictive threat modeling"
	@echo "  ‚Ä¢ ‚ö° Quantum-ready encryption"

show-housekeeping:
	@echo "$(CYAN)üßπ Resultado Housekeeping √âpico$(NC)"
	@echo "$(CYAN)================================$(NC)"
	@echo ""
	@echo "$(GREEN)üèÜ ESTAD√çSTICAS BRUTALES:$(NC)"
	@echo "  üìä 142 archivos procesados sin p√©rdidas"
	@echo "  üß† 40 modelos ML organizados (4 producci√≥n + 36 evolutivos)"
	@echo "  üåç 329 sitios globales en traffic_generator preservados"
	@echo "  ‚öôÔ∏è  13 configuraciones JSON organizadas"
	@echo "  üîí 6 versiones Protobuf (evoluci√≥n completa hacia v3.1)"
	@echo "  üåê Dashboard web completo con assets cr√≠ticos"
	@echo "  üì¶ 41 archivos experimentales - historia completa preservada"
	@echo ""
	@echo "$(YELLOW)üèóÔ∏è ESTRUCTURA ECOSISTEMA:$(NC)"
	@echo "  üìÅ $(CORE_DIR)/ - 8 componentes principales"
	@echo "  ü§ñ $(ML_PIPELINE_DIR)/ - 6 trainers + 3 analyzers + generators √©picos"
	@echo "  üíé $(MODELS_PRODUCTION_DIR)/ - Modelos en producci√≥n (14.9MB total)"
	@echo "  üìä $(MODELS_ARCHIVE_DIR)/ - 36 modelos evolutivos preservados"
	@echo "  üåê $(WEB_STATIC_DIR)/ & $(WEB_TEMPLATES_DIR)/ - Dashboard completo"
	@echo "  üîí $(PROTOCOLS_DIR)/current/ - Base s√≥lida hacia v3.1"
	@echo "  ‚öôÔ∏è  $(CONFIG_DIR)/ - Configuraciones organizadas"
	@echo "  üóÇÔ∏è  $(DATASETS_DIR)/ - clean/specialized + raw + official"
	@echo ""
	@echo "$(PURPLE)‚ú® JOYAS √âPICAS PRESERVADAS:$(NC)"
	@echo "  üåü traffic_generator.py - 329 sitios globales implementaci√≥n collaborative"
	@echo "  üìä websites_database.csv - Base de datos global curada"
	@echo "  üß† Sistema tricapa - Metodolog√≠a revolutionary documentada"
	@echo "  üèóÔ∏è  Ecosystem completo - Template para proyectos futuros"

# =============================================================================
# SETUP Y CONFIGURACI√ìN (ACTUALIZADA POST-HOUSEKEEPING)
# =============================================================================
create-config-dirs:
	@echo "$(BLUE)üìÅ Creando directorios de configuraci√≥n post-housekeeping...$(NC)"
	@mkdir -p $(CONFIG_DIR) config
	@mkdir -p $(PIDS_DIR) $(LOGS_DIR) $(DATA_DIR)
	@mkdir -p $(INFRASTRUCTURE_DIR)
	@echo "$(GREEN)‚úÖ Directorios creados$(NC)"

setup: create-config-dirs
	@echo "$(BLUE)üîß Configurando entorno virtual post-housekeeping...$(NC)"
	@if [ -d "$(VENV_NAME)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Entorno virtual ya existe$(NC)"; \
	else \
		$(PYTHON) -m venv $(VENV_NAME); \
		echo "$(GREEN)‚úÖ Entorno virtual creado$(NC)"; \
	fi
	@$(ACTIVATE) && $(PYTHON_VENV) -m pip install --upgrade pip
	@echo "$(GREEN)‚úÖ Setup completado$(NC)"

install: setup
	@echo "$(BLUE)üì¶ Instalando dependencias (estructura actualizada)...$(NC)"
	@$(ACTIVATE) && $(PIP_VENV) install -r $(INFRASTRUCTURE_DIR)/requirements.txt || $(PIP_VENV) install -r requirements.txt
	@echo "$(BLUE)üì¶ Instalando librer√≠as espec√≠ficas ML...$(NC)"
	@$(ACTIVATE) && $(PIP_VENV) install joblib scikit-learn xgboost lightgbm
	@$(ACTIVATE) && $(PIP_VENV) install zmq psutil geoip2 protobuf requests
	@$(ACTIVATE) && $(PIP_VENV) install fastapi uvicorn websockets
	@$(ACTIVATE) && $(PIP_VENV) install scapy netifaces
	@$(ACTIVATE) && $(PIP_VENV) install pandas numpy matplotlib seaborn
	@$(ACTIVATE) && $(PIP_VENV) install pytest pytest-asyncio
	@$(ACTIVATE) && $(PIP_VENV) install grpcio-tools  # Para compilaci√≥n protobuf
	@echo "$(GREEN)‚úÖ Dependencias instaladas$(NC)"

# =============================================================================
# PROTOBUF COMPILATION (NUEVA FUNCIONALIDAD AUT√ìNOMA)
# =============================================================================
compile-protobuf:
	@echo "$(BLUE)üîß Compilando archivos Protobuf autom√°ticamente...$(NC)"
	@echo "$(YELLOW)üìÅ Directorio: $(PROTOBUF_DIR)$(NC)"
	@if [ ! -d "$(PROTOBUF_DIR)" ]; then \
		echo "$(RED)‚ùå Directorio $(PROTOBUF_DIR) no existe$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üî® Compilando schemas obligatorios para arranque:$(NC)"
	@if [ -f "$(SCHEMA_NETWORK_EXTENDED)" ]; then \
		echo "  üîß $(SCHEMA_NETWORK_EXTENDED)"; \
		$(ACTIVATE) && protoc --python_out=$(PROTOBUF_DIR) --proto_path=$(PROTOBUF_DIR) $(SCHEMA_NETWORK_EXTENDED) || (echo "$(RED)‚ùå CR√çTICO: Error compilando network_event_extended_v3.proto$(NC)" && exit 1); \
	else \
		echo "$(RED)‚ùå CR√çTICO: $(SCHEMA_NETWORK_EXTENDED) no encontrado$(NC)"; \
		exit 1; \
	fi
	@if [ -f "$(SCHEMA_FIREWALL_COMMAND)" ]; then \
		echo "  üîß $(SCHEMA_FIREWALL_COMMAND)"; \
		$(ACTIVATE) && protoc --python_out=$(PROTOBUF_DIR) --proto_path=$(PROTOBUF_DIR) $(SCHEMA_FIREWALL_COMMAND) || (echo "$(RED)‚ùå CR√çTICO: Error compilando firewall_commands.proto$(NC)" && exit 1); \
	else \
		echo "$(RED)‚ùå CR√çTICO: $(SCHEMA_FIREWALL_COMMAND) no encontrado$(NC)"; \
		exit 1; \
	fi
	@if [ -f "$(SCHEMA_NETWORK_EVENT)" ]; then \
		echo "  üîß $(SCHEMA_NETWORK_EVENT)"; \
		$(ACTIVATE) && protoc --python_out=$(PROTOBUF_DIR) --proto_path=$(PROTOBUF_DIR) $(SCHEMA_NETWORK_EVENT) || echo "$(YELLOW)‚ö†Ô∏è  Warning: Error compilando network_event.proto$(NC)"; \
	fi
	@if [ -f "$(SCHEMA_NETWORK_EXTENDED_V2)" ]; then \
		echo "  üîß $(SCHEMA_NETWORK_EXTENDED_V2)"; \
		$(ACTIVATE) && protoc --python_out=$(PROTOBUF_DIR) --proto_path=$(PROTOBUF_DIR) $(SCHEMA_NETWORK_EXTENDED_V2) || echo "$(YELLOW)‚ö†Ô∏è  Warning: Error compilando network_event_extended_v2.proto$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ Compilaci√≥n Protobuf completada$(NC)"

verify-protobuf-compiled:
	@echo "$(BLUE)üîç Verificando archivos Protobuf compilados OBLIGATORIOS...$(NC)"
	@MISSING=0; \
	if [ ! -f "$(PROTOBUF_DIR)/network_event_extended_v3_pb2.py" ]; then \
		echo "$(RED)‚ùå CR√çTICO: network_event_extended_v3_pb2.py falta$(NC)"; \
		MISSING=1; \
	else \
		echo "$(GREEN)‚úÖ network_event_extended_v3_pb2.py encontrado$(NC)"; \
	fi; \
	if [ ! -f "$(PROTOBUF_DIR)/firewall_commands_pb2.py" ]; then \
		echo "$(RED)‚ùå CR√çTICO: firewall_commands_pb2.py falta$(NC)"; \
		MISSING=1; \
	else \
		echo "$(GREEN)‚úÖ firewall_commands_pb2.py encontrado$(NC)"; \
	fi; \
	if [ $MISSING -eq 1 ]; then \
		echo "$(YELLOW)üîß Auto-compilando archivos faltantes...$(NC)"; \
		$(MAKE) compile-protobuf; \
	fi

verify-firewall-rules:
	@echo "$(BLUE)üîç Verificando archivos de reglas de firewall...$(NC)"
	@if [ ! -f "$(DASHBOARD_FIREWALL_CONFIG)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Creando $(DASHBOARD_FIREWALL_CONFIG)...$(NC)"; \
		mkdir -p config/json; \
		echo '{"firewall_rules": {"rules": [], "manual_actions": {}, "firewall_agents": {}, "global_settings": {}}}' > $(DASHBOARD_FIREWALL_CONFIG); \
		echo "$(GREEN)‚úÖ $(DASHBOARD_FIREWALL_CONFIG) creado$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ $(DASHBOARD_FIREWALL_CONFIG) encontrado$(NC)"; \
	fi
	@if [ ! -f "$(FIREWALL_AGENT_RULES_CONFIG)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Creando $(FIREWALL_AGENT_RULES_CONFIG)...$(NC)"; \
		mkdir -p config/json; \
		echo '{"firewall_rules": {"rules": [], "manual_actions": {}, "firewall_agents": {}, "global_settings": {}}}' > $(FIREWALL_AGENT_RULES_CONFIG); \
		echo "$(GREEN)‚úÖ $(FIREWALL_AGENT_RULES_CONFIG) creado$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ $(FIREWALL_AGENT_RULES_CONFIG) encontrado$(NC)"; \
	fi

# A√±adir despu√©s de verify-firewall-rules (alrededor de l√≠nea 500)

test-sequence:
	@echo "$(CYAN)üß™ TEST DE SECUENCIA DE ARRANQUE$(NC)"
	@echo "$(CYAN)====================================$(NC)"
	@echo ""
	@echo "$(YELLOW)üìã Verificando archivos de configuraci√≥n...$(NC)"
	@for config in $(PROMISCUOUS_CONFIG) $(GEOIP_CONFIG) $(ML_CONFIG) $(DASHBOARD_CONFIG) $(FIREWALL_CONFIG) $(DASHBOARD_FIREWALL_CONFIG) $(FIREWALL_AGENT_RULES_CONFIG); do \
		if [ -f "$$config" ]; then \
			echo "  ‚úÖ $$config"; \
		else \
			echo "  ‚ùå $$config FALTA"; \
		fi \
	done
	@echo ""
	@echo "$(YELLOW)üìã Verificando ejecutables...$(NC)"
	@for component in $(PROMISCUOUS_AGENT) $(GEOIP_ENRICHER) $(ML_DETECTOR) $(DASHBOARD) $(FIREWALL_AGENT); do \
		if [ -f "$$component" ]; then \
			SIZE=$$(ls -lh "$$component" | awk '{print $$5}'); \
			echo "  ‚úÖ $$component ($$SIZE)"; \
		else \
			echo "  ‚ùå $$component FALTA"; \
		fi \
	done
	@echo ""
	@echo "$(YELLOW)üîß Comandos que se ejecutar√°n (DRY RUN):$(NC)"
	@echo ""
	@echo "  $(BLUE)1.$(NC) Firewall Agent:"
	@echo "     $(GREEN)$(PYTHON_VENV) $(FIREWALL_AGENT) \\$(NC)"
	@echo "       $(GREEN)$(FIREWALL_CONFIG) \\$(NC)"
	@echo "       $(GREEN)$(FIREWALL_AGENT_RULES_CONFIG)$(NC)"
	@echo ""
	@echo "  $(BLUE)2.$(NC) Promiscuous Agent (requiere sudo):"
	@echo "     $(GREEN)sudo $(PYTHON_VENV) $(PROMISCUOUS_AGENT) \\$(NC)"
	@echo "       $(GREEN)$(PROMISCUOUS_CONFIG)$(NC)"
	@echo ""
	@echo "  $(BLUE)3.$(NC) GeoIP Enricher:"
	@echo "     $(GREEN)$(PYTHON_VENV) $(GEOIP_ENRICHER) \\$(NC)"
	@echo "       $(GREEN)$(GEOIP_CONFIG)$(NC)"
	@echo ""
	@echo "  $(BLUE)4.$(NC) ML Detector:"
	@echo "     $(GREEN)$(PYTHON_VENV) $(ML_DETECTOR) \\$(NC)"
	@echo "       $(GREEN)$(ML_CONFIG)$(NC)"
	@echo ""
	@echo "  $(BLUE)5.$(NC) Dashboard:"
	@echo "     $(GREEN)$(PYTHON_VENV) $(DASHBOARD) \\$(NC)"
	@echo "       $(GREEN)$(DASHBOARD_CONFIG) \\$(NC)"
	@echo "       $(GREEN)$(DASHBOARD_FIREWALL_CONFIG)$(NC)"
	@echo ""
	@echo "$(YELLOW)üîç Verificando puertos...$(NC)"
	@for port in $(CAPTURE_PORT) $(GEOIP_PORT) $(ML_PORT) $(FIREWALL_PORT) $(DASHBOARD_WEB_PORT); do \
		if lsof -ti:$$port >/dev/null 2>&1; then \
			echo "  ‚ö†Ô∏è  Puerto $$port EN USO (PID: $$(lsof -ti:$$port))"; \
		else \
			echo "  ‚úÖ Puerto $$port libre"; \
		fi \
	done
	@echo ""
	@echo "$(YELLOW)üîç Verificando entorno virtual...$(NC)"
	@if [ -d "$(VENV_NAME)" ]; then \
		echo "  ‚úÖ Entorno virtual existe: $(VENV_NAME)"; \
		if [ -f "$(PYTHON_VENV)" ]; then \
			echo "  ‚úÖ Python: $(PYTHON_VENV)"; \
			$(PYTHON_VENV) --version 2>/dev/null | sed 's/^/     /' || echo "     ‚ùå Error verificando versi√≥n"; \
		else \
			echo "  ‚ùå Python no encontrado en venv"; \
		fi \
	else \
		echo "  ‚ùå Entorno virtual NO existe"; \
	fi
	@echo ""
	@echo "$(YELLOW)üîç Verificando permisos sudo...$(NC)"
	@if sudo -n true 2>/dev/null; then \
		echo "  ‚úÖ Permisos sudo disponibles (sin password)"; \
	else \
		echo "  ‚ö†Ô∏è  Se requerir√° password para sudo"; \
	fi
	@echo ""
	@echo "$(PURPLE)üìä RESUMEN:$(NC)"
	@echo "  Para ejecutar el sistema: $(GREEN)make start$(NC)"
	@echo "  Para parada normal: $(YELLOW)make stop$(NC)"
	@echo "  Para parada nuclear: $(RED)make stop-nuclear$(NC)"

monitor-live:
	@echo "$(CYAN)üîÑ Iniciando monitor en tiempo real...$(NC)"
	@./scripts/utils/monitor_autoinmune.sh 3

# A√±adir despu√©s de monitor-live

dashboard-terminal:
	@echo "$(CYAN)üìä DASHBOARD TERMINAL - Sistema Autoinmune$(NC)"
	@echo "$(CYAN)==========================================$(NC)"
	@watch -n 2 -c '$(MAKE) -s health-check-compact'

health-check-compact:
	@echo "$(date '+%H:%M:%S') - SISTEMA AUTOINMUNE DIGITAL"
	@echo "----------------------------------------"
	@echo "COMPONENTES:"
	@pgrep -f "simple_firewall_agent" >/dev/null && echo "  [‚úì] Firewall" || echo "  [‚úó] Firewall"
	@pgrep -f "promiscuous_agent" >/dev/null && echo "  [‚úì] Promiscuous" || echo "  [‚úó] Promiscuous"
	@pgrep -f "geoip_enricher" >/dev/null && echo "  [‚úì] GeoIP" || echo "  [‚úó] GeoIP"
	@pgrep -f "lightweight_ml_detector" >/dev/null && echo "  [‚úì] ML Detector" || echo "  [‚úó] ML Detector"
	@pgrep -f "real_zmq_dashboard" >/dev/null && echo "  [‚úì] Dashboard" || echo "  [‚úó] Dashboard"
	@echo ""
	@echo "RECURSOS:"
	@ps aux | grep -E "python.*(core/)" | grep -v grep | awk '{cpu+=$$3; mem+=$$4} END {printf "  CPU Total: %.1f%%\n  MEM Total: %.1f%%\n", cpu, mem}'
	@echo ""
	@echo "ACTIVIDAD:"
	@for log in $(LOGS_DIR)/*.log; do \
		if [ -f "$$log" ]; then \
			echo "  $$(basename $$log .log): $$(tail -1 $$log | cut -c1-50)..."; \
		fi \
	done | head -5

check-protobuf-imports:
	@echo "$(BLUE)üîç Verificando imports de Protobuf en componentes core...$(NC)"
	@echo "$(YELLOW)üìã Archivos que deben importar desde protocols/current/:$(NC)"
	@for component in $(PROMISCUOUS_AGENT) $(GEOIP_ENRICHER) $(ML_DETECTOR) $(DASHBOARD) $(FIREWALL_AGENT); do \
		if [ -f "$component" ]; then \
			echo "  üîç Analizando $component..."; \
			if grep -q "import.*pb2" "$component" 2>/dev/null; then \
				echo "    üì¶ Imports protobuf encontrados:"; \
				grep "import.*pb2\|from.*pb2" "$component" | sed 's/^/      /' || true; \
				if grep -q "protocols.current" "$component" 2>/dev/null; then \
					echo "    $(GREEN)‚úÖ Ruta protocols.current correcta$(NC)"; \
				else \
					echo "    $(YELLOW)‚ö†Ô∏è  Revisar rutas - debe usar: from protocols.current import$(NC)"; \
				fi \
			else \
				echo "    $(BLUE)‚ÑπÔ∏è  Sin imports protobuf (normal para algunos componentes)$(NC)"; \
			fi \
		fi \
	done

fix-protobuf-imports:
	@echo "$(BLUE)üîß Sugerencias para arreglar imports Protobuf...$(NC)"
	@echo "$(YELLOW)üí° PATR√ìN CORRECTO para imports:$(NC)"
	@echo "  $(GREEN)‚úÖ from protocols.current import network_event_extended_v3_pb2$(NC)"
	@echo "  $(GREEN)‚úÖ from protocols.current import firewall_commands_pb2$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ùå PATRONES INCORRECTOS a evitar:$(NC)"
	@echo "  $(RED)‚ùå import network_event_extended_v3_pb2  # Sin ruta$(NC)"
	@echo "  $(RED)‚ùå from . import network_event_extended_v3_pb2  # Ruta relativa$(NC)"
	@echo ""
	@echo "$(YELLOW)üîß PARA ARREGLAR MANUALMENTE:$(NC)"
	@echo "  1. Abrir cada archivo core/ que use protobuf"
	@echo "  2. Cambiar imports para usar: protocols.current.XXXX_pb2"
	@echo "  3. Verificar con: make check-protobuf-imports"

check-protobuf:
	@echo "$(BLUE)üîç Verificando compilaci√≥n Protobuf...$(NC)"
	@echo "$(YELLOW)Archivos .proto:$(NC)"
	@ls -la $(PROTOBUF_DIR)/*.proto 2>/dev/null | awk '{print "  üìÑ " $$9 " (" $$5 " bytes)"}' || echo "  ‚ùå No se encontraron archivos .proto"
	@echo "$(YELLOW)Archivos compilados (_pb2.py):$(NC)"
	@ls -la $(PROTOBUF_DIR)/*_pb2.py 2>/dev/null | awk '{print "  üîß " $$9 " (" $$5 " bytes)"}' || echo "  ‚ùå No se encontraron archivos compilados"
	@echo "$(YELLOW)Test importaci√≥n:$(NC)"
	@cd $(PROTOBUF_DIR) && $(ACTIVATE) && $(PYTHON_VENV) -c "import network_event_extended_v3_pb2; print('  ‚úÖ network_event_extended_v3_pb2 importable')" 2>/dev/null || echo "  ‚ùå Error importando network_event_extended_v3_pb2"
	@cd $(PROTOBUF_DIR) && $(ACTIVATE) && $(PYTHON_VENV) -c "import firewall_commands_pb2; print('  ‚úÖ firewall_commands_pb2 importable')" 2>/dev/null || echo "  ‚ùå Error importando firewall_commands_pb2"

check-structure:
	@echo "$(BLUE)üîç Verificando estructura post-housekeeping...$(NC)"
	@echo "$(YELLOW)üìÅ Directorios principales:$(NC)"
	@for dir in $(CORE_DIR) $(ML_PIPELINE_DIR) $(MODELS_PRODUCTION_DIR) $(WEB_STATIC_DIR) $(PROTOCOLS_DIR); do \
		if [ -d "$$dir" ]; then \
			echo "  ‚úÖ $$dir/"; \
		else \
			echo "  ‚ùå $$dir/ falta"; \
		fi \
	done
	@echo "$(YELLOW)üß† Componentes core:$(NC)"
	@for component in $(PROMISCUOUS_AGENT) $(GEOIP_ENRICHER) $(ML_DETECTOR) $(DASHBOARD) $(FIREWALL_AGENT) $(FIXED_SERVICE_SNIFFER) $(NETWORK_FEATURE_EXTRACTOR) $(FAST_EJECTOR_LAYER); do \
		if [ -f "$component" ]; then \
			SIZE=$(ls -lh "$component" | awk '{print $5}'); \
			echo "  ‚úÖ $component ($SIZE)"; \
		else \
			echo "  ‚ùå $component falta"; \
		fi \
	done
	@echo "$(YELLOW)üíé Modelos en producci√≥n:$(NC)"
	@ls -la $(MODELS_PRODUCTION_DIR)/*.joblib 2>/dev/null | awk '{print "  üß† " $$9 " (" $$5 " bytes)"}' || echo "  ‚ùå No se encontraron modelos en producci√≥n"
	@echo "$(YELLOW)üåê Assets web:$(NC)"
	@if [ -d "$(WEB_STATIC_DIR)" ]; then \
		echo "  ‚úÖ $(WEB_STATIC_DIR)/"; \
		ls $(WEB_STATIC_DIR)/ 2>/dev/null | sed 's/^/    üìÑ /' || echo "    ‚ö†Ô∏è  Directorio vac√≠o"; \
	else \
		echo "  ‚ùå $(WEB_STATIC_DIR)/ falta"; \
	fi
	@if [ -d "$(WEB_TEMPLATES_DIR)" ]; then \
		echo "  ‚úÖ $(WEB_TEMPLATES_DIR)/"; \
		ls $(WEB_TEMPLATES_DIR)/ 2>/dev/null | sed 's/^/    üìÑ /' || echo "    ‚ö†Ô∏è  Directorio vac√≠o"; \
	else \
		echo "  ‚ùå $(WEB_TEMPLATES_DIR)/ falta"; \
	fi

# Resto de funciones de setup (adaptadas)
setup-perms:
	@echo "$(BLUE)üîß Configurando permisos de firewall...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Requiere sudo para iptables$(NC)"
	@sudo bash -c 'echo "$(USER) ALL=(ALL) NOPASSWD: /sbin/iptables" >> /etc/sudoers.d/$(USER)-iptables' || true
	@sudo chmod 0440 /etc/sudoers.d/$(USER)-iptables || true
	@echo "$(GREEN)‚úÖ Permisos configurados$(NC)"
	@sudo -n iptables -L >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Permisos funcionando$(NC)" || echo "$(RED)‚ùå Error en permisos - ejecutar: sudo make setup-perms$(NC)"

check-deps:
	@echo "$(BLUE)üîç Verificando dependencias...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import zmq; print('‚úÖ ZeroMQ disponible')" 2>/dev/null || echo "‚ùå ZeroMQ falta"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import scapy; print('‚úÖ Scapy disponible')" 2>/dev/null || echo "‚ùå Scapy falta"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import sklearn; print('‚úÖ Scikit-learn disponible')" 2>/dev/null || echo "‚ùå Scikit-learn falta"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import geoip2; print('‚úÖ GeoIP2 disponible')" 2>/dev/null || echo "‚ùå GeoIP2 falta"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import fastapi; print('‚úÖ FastAPI disponible')" 2>/dev/null || echo "‚ùå FastAPI falta"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import joblib; print('‚úÖ Joblib disponible')" 2>/dev/null || echo "‚ùå Joblib falta"
	@$(ACTIVATE) && $(PYTHON_VENV) -c "import protobuf; print('‚úÖ Protobuf disponible')" 2>/dev/null || echo "‚ùå Protobuf falta"
	@which sudo >/dev/null && echo "‚úÖ sudo disponible" || echo "‚ùå sudo falta"
	@which protoc >/dev/null && echo "‚úÖ protoc disponible" || echo "‚ùå protoc falta (instalar Protocol Buffers)"

check-geoip:
	@echo "$(BLUE)üåç Verificando configuraci√≥n GeoIP...$(NC)"
	@if [ -f "GeoLite2-City.mmdb" ]; then \
		echo "  ‚úÖ Base de datos GeoLite2 encontrada"; \
		stat -c "%y" GeoLite2-City.mmdb | sed 's/^/  üìÖ √öltima modificaci√≥n: /' 2>/dev/null || stat -f "%Sm" GeoLite2-City.mmdb | sed 's/^/  üìÖ √öltima modificaci√≥n: /'; \
	else \
		echo "  ‚ö†Ô∏è  Base de datos GeoLite2 NO encontrada"; \
		echo "  üí° Se usar√° ip-api.com como fallback"; \
		echo "  üí° Para descargar GeoLite2: https://dev.maxmind.com/geoip/geolite2-free-geolocation-data"; \
	fi
	@echo "  üîó Verificando conectividad con ip-api.com..."
	@curl -s --connect-timeout 3 "http://ip-api.com/json/8.8.8.8" >/dev/null && \
		echo "  ‚úÖ ip-api.com accesible" || \
		echo "  ‚ùå ip-api.com no accesible"

verify: check-structure
	@echo "$(BLUE)üîç Verificando integridad del sistema post-housekeeping...$(NC)"
	@echo "$(YAML)Configuraciones JSON:$(NC)"
	@for config in $(PROMISCUOUS_CONFIG) $(GEOIP_CONFIG) $(ML_CONFIG) $(DASHBOARD_CONFIG) $(FIREWALL_CONFIG); do \
		if [ -f "$$config" ]; then \
			echo "  ‚úÖ $$config"; \
		else \
			echo "  ‚ùå $$config falta - creando configuraci√≥n b√°sica..."; \
			mkdir -p $(CONFIG_DIR); \
			if echo "$$config" | grep -q "dashboard_config"; then \
				echo '{"port": 8080, "host": "localhost", "debug": false}' > "$$config"; \
				echo "  ‚úÖ $$config creado"; \
			elif echo "$$config" | grep -q "simple_firewall_agent_config"; then \
				echo '{"agent_id": "firewall_001", "enabled": true, "log_level": "INFO"}' > "$$config"; \
				echo "  ‚úÖ $$config creado"; \
			elif echo "$$config" | grep -q "lightweight_ml_detector_config"; then \
				echo '{"model_path": "models/production/", "tricapa_enabled": true}' > "$$config"; \
				echo "  ‚úÖ $$config creado"; \
			fi \
		fi \
	done
	@echo "$(YELLOW)Permisos:$(NC)"
	@sudo -n iptables -L >/dev/null 2>&1 && echo "  ‚úÖ Permisos firewall OK" || echo "  ‚ùå Permisos firewall faltan (ejecutar: make setup-perms)"

clean:
	@echo "$(YELLOW)üßπ Limpiando sistema post-housekeeping...$(NC)"
	@$(MAKE) stop 2>/dev/null || true
	@echo "  üóëÔ∏è  Removiendo entorno virtual..."
	@rm -rf $(VENV_NAME)
	@echo "  üóëÔ∏è  Limpiando archivos Python..."
	@find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@find . -name "*.pyc" -delete 2>/dev/null || true
	@find . -name "*.pyo" -delete 2>/dev/null || true
	@echo "  üóëÔ∏è  Limpiando Protobuf compilados..."
	@rm -f $(PROTOBUF_DIR)/*_pb2.py
	@echo "  üóëÔ∏è  Limpiando directorios temporales..."
	@rm -rf $(PIDS_DIR) $(LOGS_DIR) $(DATA_DIR)
	@echo "$(GREEN)‚úÖ Limpieza completada$(NC)"

# =============================================================================
# GESTI√ìN DEL SISTEMA PRINCIPAL (ACTUALIZADA POST-HOUSEKEEPING)
# =============================================================================
start: install verify check-geoip compile-protobuf verify-firewall-rules stop
	@echo "$(GREEN)üöÄ Iniciando Sistema Autoinmune Digital v2.0 POST-HOUSEKEEPING...$(NC)"
	@echo "$(CYAN)================================================================$(NC)"
	@echo "$(PURPLE)Branch: $(BRANCH)$(NC)"
	@echo "$(PURPLE)Estado: 142 archivos organizados, 0 p√©rdidas$(NC)"
	@echo ""
	@echo "$(BLUE)üîÑ Iniciando componentes con estructura actualizada...$(NC)"

	# Verificar componente promiscuous principal
	@if [ -f "$(PROMISCUOUS_AGENT)" ]; then \
		echo "$(BLUE)‚úÖ Usando $(PROMISCUOUS_AGENT) (principal)$(NC)"; \
	else \
		echo "$(RED)‚ùå No se encontr√≥ $(PROMISCUOUS_AGENT)$(NC)"; \
		exit 1; \
	fi

	@echo "$(BLUE)üìÅ Verificando configuraciones JSON...$(NC)"
	@test -f $(DASHBOARD_CONFIG) || (mkdir -p $(CONFIG_DIR) && echo '{"port": 8080, "host": "localhost", "debug": false}' > $(DASHBOARD_CONFIG))
	@test -f $(FIREWALL_CONFIG) || (mkdir -p $(CONFIG_DIR) && echo '{"agent_id": "firewall_001", "enabled": true, "log_level": "INFO"}' > $(FIREWALL_CONFIG))
	@test -f $(ML_CONFIG) || (mkdir -p $(CONFIG_DIR) && echo '{"model_path": "models/production/", "tricapa_enabled": true}' > $(ML_CONFIG))
	@echo ""

	@echo "$(BLUE)1. üõ°Ô∏è  Firewall Agent ($(FIREWALL_AGENT))...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) $(FIREWALL_AGENT) $(FIREWALL_CONFIG) $(FIREWALL_AGENT_RULES_CONFIG) > $(FIREWALL_LOG) 2>&1 & echo $$! > $(FIREWALL_PID)
	@sleep 3

	@echo "$(BLUE)2. üïµÔ∏è  Promiscuous Agent ‚Üí Puerto $(CAPTURE_PORT)...$(NC)"
	@sudo bash -c '$(PYTHON_VENV) $(PROMISCUOUS_AGENT) $(PROMISCUOUS_CONFIG) > $(PROMISCUOUS_LOG) 2>&1 & echo $! > $(PROMISCUOUS_PID)'
	@sleep 3

	@echo "$(BLUE)3. üåç GeoIP Enricher ($(CAPTURE_PORT) ‚Üí $(GEOIP_PORT))...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) $(GEOIP_ENRICHER) $(GEOIP_CONFIG) > $(GEOIP_LOG) 2>&1 & echo $$! > $(GEOIP_PID)
	@sleep 3

	@echo "$(BLUE)4. ü§ñ ML Detector Tricapa ($(GEOIP_PORT) ‚Üí $(ML_PORT))...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) $(ML_DETECTOR) $(ML_CONFIG) > $(ML_LOG) 2>&1 & echo $$! > $(ML_PID)
	@sleep 3

	@echo "$(BLUE)5. üìä Dashboard Web ($(ML_PORT) ‚Üí UI $(DASHBOARD_WEB_PORT))...$(NC)"
	@$(ACTIVATE) && $(PYTHON_VENV) $(DASHBOARD) $(DASHBOARD_CONFIG) $(DASHBOARD_FIREWALL_CONFIG) > $(DASHBOARD_LOG) 2>&1 & echo $$! > $(DASHBOARD_PID)
	@sleep 5

	@echo ""
	@echo "$(GREEN)üéâ SISTEMA POST-HOUSEKEEPING OPERACIONAL$(NC)"
	@echo "$(CYAN)========================================$(NC)"
	@echo "$(YELLOW)üìä Dashboard Principal: http://localhost:$(DASHBOARD_WEB_PORT)$(NC)"
	@echo "$(YELLOW)üíé Modelos Tricapa: $(MODELS_PRODUCTION_DIR)/$(NC)"
	@echo "$(YELLOW)üåê Assets Web: $(WEB_STATIC_DIR)/ + $(WEB_TEMPLATES_DIR)/$(NC)"
	@echo "$(YELLOW)üîí Protocolos: $(PROTOCOLS_DIR)/current/ (6 versiones)$(NC)"
	@echo "$(YELLOW)üß† ML Pipeline: $(ML_PIPELINE_DIR)/ (listo para reentrenamiento)$(NC)"
	@echo "$(YELLOW)üåç 329 sitios globales preservados$(NC)"
	@echo ""
	@$(MAKE) status

# Otros comandos de gesti√≥n (actualizados para estructura post-housekeeping)
start-core: install verify verify-protobuf-compiled stop
	@echo "$(GREEN)üöÄ Iniciando componentes CORE (estructura actualizada)...$(NC)"
	@test -f $(FIREWALL_CONFIG) || (mkdir -p $(CONFIG_DIR) && echo '{"agent_id": "firewall_001", "enabled": true, "log_level": "INFO"}' > $(FIREWALL_CONFIG))
	@test -f $(DASHBOARD_CONFIG) || (mkdir -p $(CONFIG_DIR) && echo '{"port": 8080, "host": "localhost", "debug": false}' > $(DASHBOARD_CONFIG))
	@test -f $(ML_CONFIG) || (mkdir -p $(CONFIG_DIR) && echo '{"model_path": "models/production/", "tricapa_enabled": true}' > $(ML_CONFIG))

	@$(ACTIVATE) && $(PYTHON_VENV) $(FIREWALL_AGENT) $(FIREWALL_CONFIG) $(FIREWALL_AGENT_RULES_CONFIG) > $(FIREWALL_LOG) 2>&1 & echo $$! > $(FIREWALL_PID)
	@sleep 2
	@sudo bash -c '$(PYTHON_VENV) $(PROMISCUOUS_AGENT) $(PROMISCUOUS_CONFIG) > $(PROMISCUOUS_LOG) 2>&1 & echo $! > $(PROMISCUOUS_PID)'
	@sleep 2
	@$(ACTIVATE) && $(PYTHON_VENV) $(GEOIP_ENRICHER) $(GEOIP_CONFIG) > $(GEOIP_LOG) 2>&1 & echo $! > $(GEOIP_PID)
	@sleep 2
	@$(ACTIVATE) && $(PYTHON_VENV) $(ML_DETECTOR) $(ML_CONFIG) > $(ML_LOG) 2>&1 & echo $! > $(ML_PID)
	@sleep 2
	@$(ACTIVATE) && $(PYTHON_VENV) $(DASHBOARD) $(DASHBOARD_CONFIG) $(DASHBOARD_FIREWALL_CONFIG) > $(DASHBOARD_LOG) 2>&1 & echo $$! > $(DASHBOARD_PID)
	@echo "$(GREEN)‚úÖ Componentes core iniciados con estructura post-housekeeping$(NC)"

start-advanced:
	@echo "$(BLUE)üß† Iniciando componentes AVANZADOS (ML Pipeline)...$(NC)"
	@if [ -f "$(NEURAL_TRAINER)" ]; then \
		echo "$(BLUE)ü§ñ Neural Trainer ($(ML_PIPELINE_DIR))...$(NC)"; \
		$(ACTIVATE) && $(PYTHON_VENV) $(NEURAL_TRAINER) $(NEURAL_CONFIG) > $(NEURAL_LOG) 2>&1 & echo $! > $(NEURAL_PID); \
		sleep 2; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Neural Trainer no disponible en $(ML_PIPELINE_DIR)$(NC)"; \
	fi
	@if [ -f "$(SNIFFER_RETRAINER)" ]; then \
		echo "$(BLUE)üîÑ Sniffer Retrainer disponible$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Sniffer Retrainer no encontrado$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ Componentes ML Pipeline verificados$(NC)"

start-bg: install verify check-geoip verify-protobuf-compiled stop
	@echo "$(GREEN)üöÄ Iniciando sistema (background mode)...$(NC)"
	@test -f $(FIREWALL_CONFIG) || (mkdir -p config && echo '{"rules": [], "enabled": true, "mode": "agent"}' > $(FIREWALL_CONFIG))
	@test -f $(DASHBOARD_CONFIG) || (mkdir -p config && echo '{"dashboard_rules": [], "monitoring": true, "mode": "dashboard"}' > $(DASHBOARD_CONFIG))
	@$(ACTIVATE) && nohup $(PYTHON_VENV) $(FIREWALL_AGENT) $(FIREWALL_CONFIG) $(FIREWALL_AGENT_RULES_CONFIG) > $(FIREWALL_LOG) 2>&1 & echo $$! > $(FIREWALL_PID)
	@sleep 2
	@sudo bash -c 'nohup $(PYTHON_VENV) $(PROMISCUOUS_AGENT) $(PROMISCUOUS_CONFIG) > $(PROMISCUOUS_LOG) 2>&1 & echo $! > $(PROMISCUOUS_PID)'
	@sleep 2
	@$(ACTIVATE) && nohup $(PYTHON_VENV) $(GEOIP_ENRICHER) $(GEOIP_CONFIG) > $(GEOIP_LOG) 2>&1 & echo $! > $(GEOIP_PID)
	@sleep 2
	@$(ACTIVATE) && nohup $(PYTHON_VENV) $(ML_DETECTOR) $(ML_CONFIG) > $(ML_LOG) 2>&1 & echo $! > $(ML_PID)
	@sleep 2
	@$(ACTIVATE) && nohup $(PYTHON_VENV) $(DASHBOARD) $(DASHBOARD_CONFIG) $(DASHBOARD_FIREWALL_CONFIG) > $(DASHBOARD_LOG) 2>&1 & echo $$! > $(DASHBOARD_PID)
	@echo "$(GREEN)‚úÖ Sistema iniciado en background$(NC)"
	@echo "$(YELLOW)üìä Dashboard: http://localhost:$(DASHBOARD_WEB_PORT)$(NC)"

# Otros comandos de gesti√≥n siguen el mismo patr√≥n de actualizaci√≥n...
start-core: install verify verify-protobuf-compiled stop
	@echo "$(GREEN)üöÄ Iniciando componentes CORE (estructura actualizada)...$(NC)"
	@test -f $(FIREWALL_CONFIG) || (mkdir -p $(CONFIG_DIR) && echo '{"agent_id": "firewall_001", "enabled": true, "log_level": "INFO"}' > $(FIREWALL_CONFIG))
	@test -f $(DASHBOARD_CONFIG) || (mkdir -p $(CONFIG_DIR) && echo '{"port": 8080, "host": "localhost", "debug": false}' > $(DASHBOARD_CONFIG))
	@test -f $(ML_CONFIG) || (mkdir -p $(CONFIG_DIR) && echo '{"model_path": "models/production/", "tricapa_enabled": true}' > $(ML_CONFIG))

	@$(ACTIVATE) && $(PYTHON_VENV) $(FIREWALL_AGENT) $(FIREWALL_CONFIG) $(FIREWALL_AGENT_RULES_CONFIG) > $(FIREWALL_LOG) 2>&1 & echo $! > $(FIREWALL_PID)
	@sleep 2
	@sudo bash -c '$(PYTHON_VENV) $(PROMISCUOUS_AGENT) $(PROMISCUOUS_CONFIG) > $(PROMISCUOUS_LOG) 2>&1 & echo $! > $(PROMISCUOUS_PID)'
	@sleep 2
	@$(ACTIVATE) && $(PYTHON_VENV) $(GEOIP_ENRICHER) $(GEOIP_CONFIG) > $(GEOIP_LOG) 2>&1 & echo $! > $(GEOIP_PID)
	@sleep 2
	@$(ACTIVATE) && $(PYTHON_VENV) $(ML_DETECTOR) $(ML_CONFIG) > $(ML_LOG) 2>&1 & echo $! > $(ML_PID)
	@sleep 2
	@$(ACTIVATE) && $(PYTHON_VENV) $(DASHBOARD) $(DASHBOARD_CONFIG) $(DASHBOARD_FIREWALL_CONFIG) > $(DASHBOARD_LOG) 2>&1 & echo $! > $(DASHBOARD_PID)
	@echo "$(GREEN)‚úÖ Componentes core iniciados con estructura post-housekeeping$(NC)"

start-advanced:
	@echo "$(BLUE)üß† Iniciando componentes AVANZADOS (ML Pipeline)...$(NC)"
	@if [ -f "$(NEURAL_TRAINER)" ]; then \
		echo "$(BLUE)ü§ñ Neural Trainer ($(ML_PIPELINE_DIR))...$(NC)"; \
		$(ACTIVATE) && $(PYTHON_VENV) $(NEURAL_TRAINER) $(NEURAL_CONFIG) > $(NEURAL_LOG) 2>&1 & echo $$! > $(NEURAL_PID); \
		sleep 2; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Neural Trainer no disponible en $(ML_PIPELINE_DIR)$(NC)"; \
	fi
	@if [ -f "$(SNIFFER_RETRAINER)" ]; then \
		echo "$(BLUE)üîÑ Sniffer Retrainer disponible$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Sniffer Retrainer no encontrado$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ Componentes ML Pipeline verificados$(NC)"

# =============================================================================
# GESTI√ìN DE PARADAS (NUCLEAR GARANTIZADO)
# =============================================================================

# Funci√≥n de parada est√°ndar (secuencial y limpia)
stop:
	@echo "$(YELLOW)üõë Deteniendo sistema POST-HOUSEKEEPING (m√©todo secuencial)...$(NC)"
	@echo "$(BLUE)Parada secuencial en orden inverso...$(NC)"

	# M√©todo 1: Intentar con PIDs si existen
	@echo "üîÑ M√©todo 1: Deteniendo con PIDs guardados..."
	@-if [ -f $(DASHBOARD_PID) ]; then echo "üìä Deteniendo Dashboard..."; kill $(cat $(DASHBOARD_PID)) 2>/dev/null || true; rm -f $(DASHBOARD_PID); fi
	@-if [ -f $(ML_PID) ]; then echo "ü§ñ Deteniendo ML Detector..."; kill $(cat $(ML_PID)) 2>/dev/null || true; rm -f $(ML_PID); fi
	@-if [ -f $(GEOIP_PID) ]; then echo "üåç Deteniendo GeoIP Enricher..."; kill $(cat $(GEOIP_PID)) 2>/dev/null || true; rm -f $(GEOIP_PID); fi
	@-if [ -f $(PROMISCUOUS_PID) ]; then echo "üïµÔ∏è  Deteniendo Promiscuous Agent..."; kill $(cat $(PROMISCUOUS_PID)) 2>/dev/null || true; sudo kill $(cat $(PROMISCUOUS_PID)) 2>/dev/null || true; rm -f $(PROMISCUOUS_PID); fi
	@-if [ -f $(FIREWALL_PID) ]; then echo "üõ°Ô∏è  Deteniendo Firewall Agent..."; kill $(cat $(FIREWALL_PID)) 2>/dev/null || true; rm -f $(FIREWALL_PID); fi
	@-if [ -f $(NEURAL_PID) ]; then echo "ü§ñ Deteniendo Neural Trainer..."; kill $(cat $(NEURAL_PID)) 2>/dev/null || true; rm -f $(NEURAL_PID); fi
	@sleep 2

	# M√©todo 2: pkill por nombre de proceso (m√°s agresivo)
	@echo "üîÑ M√©todo 2: pkill por patr√≥n actualizado..."
	@-echo "üìä Matando Dashboard..."
	@-pkill -f "real_zmq_dashboard_with_firewall" 2>/dev/null || true
	@-echo "ü§ñ Matando ML Detector..."
	@-pkill -f "lightweight_ml_detector" 2>/dev/null || true
	@-echo "üåç Matando GeoIP Enricher..."
	@-pkill -f "geoip_enricher" 2>/dev/null || true
	@-echo "üïµÔ∏è  Matando Promiscuous Agent..."
	@-pkill -f "promiscuous_agent" 2>/dev/null || true
	@-sudo pkill -f "promiscuous_agent" 2>/dev/null || true
	@-echo "üõ°Ô∏è  Matando Firewall Agent..."
	@-pkill -f "simple_firewall_agent" 2>/dev/null || true
	@sleep 2

	# M√©todo 3: SIGKILL si siguen activos (nuclear)
	@echo "üîÑ M√©todo 3: SIGKILL nuclear..."
	@-pkill -9 -f "real_zmq_dashboard_with_firewall" 2>/dev/null || true
	@-pkill -9 -f "lightweight_ml_detector" 2>/dev/null || true
	@-pkill -9 -f "geoip_enricher" 2>/dev/null || true
	@-pkill -9 -f "promiscuous_agent" 2>/dev/null || true
	@-sudo pkill -9 -f "promiscuous_agent" 2>/dev/null || true
	@-pkill -9 -f "simple_firewall_agent" 2>/dev/null || true

	# Limpiar archivos PID
	@echo "üßπ Limpiando PIDs..."
	@-rm -f $(PIDS_DIR)/*.pid

	@echo "$(GREEN)‚úÖ Sistema post-housekeeping detenido correctamente$(NC)"

# A√±adir despu√©s de stop, antes de stop-nuclear

stop-force:
	@echo "$(YELLOW)‚ö° Parada forzada (m√°s agresiva que stop, menos que nuclear)$(NC)"
	@$(MAKE) stop
	@sleep 2
	@echo "$(YELLOW)üî® Aplicando fuerza adicional...$(NC)"
	@-pkill -9 -f "core/.*\.py" 2>/dev/null || true
	@-sudo pkill -9 -f "promiscuous_agent" 2>/dev/null || true
	@for port in $(CAPTURE_PORT) $(GEOIP_PORT) $(ML_PORT) $(FIREWALL_PORT) $(DASHBOARD_WEB_PORT); do \
		lsof -ti:$$port 2>/dev/null | xargs -r kill -9 2>/dev/null || true; \
	done
	@rm -f $(PIDS_DIR)/*.pid
	@echo "$(GREEN)‚úÖ Parada forzada completada$(NC)"

# Comando de emergency stop (nuclear) - VERSI√ìN MEJORADA POST-HOUSEKEEPING
# Reemplazar el stop-nuclear existente con esta versi√≥n mejorada

stop-nuclear:
	@echo "$(RED)‚ò¢Ô∏è  PARADA NUCLEAR ULTRA POST-HOUSEKEEPING ACTIVADA ‚ò¢Ô∏è$(NC)"
	@echo "$(RED)======================================================$(NC)"
	@echo "$(RED)‚ö†Ô∏è  DEFCON 1: Exterminaci√≥n total de procesos$(NC)"
	@echo ""

	# Pre-check: Mostrar lo que vamos a matar
	@echo "$(YELLOW)üîç Procesos objetivo detectados:$(NC)"
	@ps aux | grep -E "python.*upgraded|python.*core/|python.*ml_pipeline/" | grep -v grep | awk '{print "  üéØ " $$2 " - " $$11}' | head -10 || echo "  No hay procesos detectados"
	@echo ""

	# Nuclear 1: Soft kill primero (dar oportunidad de cleanup)
	@echo "$(YELLOW)üíÄ Fase 1: Soft kill (SIGTERM)...$(NC)"
	@-pkill -TERM -f "promiscuous_agent|geoip_enricher|lightweight_ml_detector|dashboard_with_firewall|simple_firewall_agent" 2>/dev/null || true
	@sleep 1

	# Nuclear 2: Kill por nombres espec√≠ficos
	@echo "$(YELLOW)üíÄ Fase 2: Kill espec√≠fico por componentes...$(NC)"
	@-pkill -9 -f "promiscuous_agent" 2>/dev/null || true
	@-pkill -9 -f "geoip_enricher" 2>/dev/null || true
	@-pkill -9 -f "lightweight_ml_detector" 2>/dev/null || true
	@-pkill -9 -f "real_zmq_dashboard_with_firewall" 2>/dev/null || true
	@-pkill -9 -f "simple_firewall_agent" 2>/dev/null || true
	@-pkill -9 -f "fixed_service_sniffer" 2>/dev/null || true
	@sleep 1

	# Nuclear 3: Sudo kill para procesos con privilegios
	@echo "$(YELLOW)üíÄ Fase 3: Sudo kill (procesos privilegiados)...$(NC)"
	@-sudo pkill -9 -f "python.*promiscuous" 2>/dev/null || true
	@-sudo pkill -9 -f "python.*core/" 2>/dev/null || true
	@-sudo pkill -9 -f "python.*ml_pipeline/" 2>/dev/null || true

	# Nuclear 4: Matar por PID files si existen
	@echo "$(YELLOW)üíÄ Fase 4: Kill por archivos PID...$(NC)"
	@for pidfile in $(PIDS_DIR)/*.pid; do \
		if [ -f "$$pidfile" ]; then \
			PID=$$(cat "$$pidfile" 2>/dev/null); \
			if [ ! -z "$$PID" ]; then \
				echo "  Matando PID $$PID desde $$pidfile"; \
				kill -9 "$$PID" 2>/dev/null || sudo kill -9 "$$PID" 2>/dev/null || true; \
			fi; \
			rm -f "$$pidfile"; \
		fi \
	done

	# Nuclear 5: Liberar puertos (m√°s agresivo)
	@echo "$(YELLOW)üíÄ Fase 5: Liberaci√≥n forzada de puertos...$(NC)"
	@for port in $(CAPTURE_PORT) $(GEOIP_PORT) $(ML_PORT) $(FIREWALL_PORT) $(DASHBOARD_WEB_PORT); do \
		PIDS=$$(lsof -ti:$$port 2>/dev/null); \
		if [ ! -z "$$PIDS" ]; then \
			echo "  Puerto $$port ocupado por PIDs: $$PIDS"; \
			echo "$$PIDS" | xargs -r kill -9 2>/dev/null || echo "$$PIDS" | xargs -r sudo kill -9 2>/dev/null || true; \
		fi \
	done

	# Nuclear 6: Buscar y destruir por patr√≥n amplio
	@echo "$(YELLOW)üíÄ Fase 6: B√∫squeda y destrucci√≥n por patr√≥n...$(NC)"
	@-ps aux | grep -E "python.*(upgraded|core/|ml_pipeline/|config/json)" | grep -v grep | awk '{print $$2}' | xargs -r kill -9 2>/dev/null || true
	@-ps aux | grep -E "python.*(upgraded|core/|ml_pipeline/|config/json)" | grep -v grep | awk '{print $$2}' | xargs -r sudo kill -9 2>/dev/null || true

	# Nuclear 7: Limpieza total de archivos temporales
	@echo "$(YELLOW)üíÄ Fase 7: Limpieza de archivos temporales...$(NC)"
	@-rm -rf $(PIDS_DIR)/*.pid
	@-rm -f $(LOGS_DIR)/*.log.lock 2>/dev/null || true
	@-rm -f /tmp/*upgraded*happiness* 2>/dev/null || true
	@-rm -f /tmp/zmq* 2>/dev/null || true
	@-sudo rm -f /var/run/*upgraded* 2>/dev/null || true

	# Nuclear 8: Verificaci√≥n final ULTRA
	@echo ""
	@echo "$(RED)‚ò¢Ô∏è  VERIFICACI√ìN POST-NUCLEAR:$(NC)"
	@SURVIVORS=$$(ps aux | grep -E "python.*(upgraded|core/|ml_pipeline/)" | grep -v grep | wc -l); \
	if [ $$SURVIVORS -gt 0 ]; then \
		echo "$(RED)‚ö†Ô∏è  ALERTA: $$SURVIVORS procesos supervivientes detectados$(NC)"; \
		echo "$(YELLOW)Intentando exterminaci√≥n final...$(NC)"; \
		ps aux | grep -E "python.*(upgraded|core/|ml_pipeline/)" | grep -v grep | awk '{print $$2}' | while read pid; do \
			echo "  ‚ò†Ô∏è  Exterminando superviviente PID: $$pid"; \
			kill -9 $$pid 2>/dev/null || sudo kill -9 $$pid 2>/dev/null || true; \
		done; \
		sleep 2; \
		FINAL_CHECK=$$(ps aux | grep -E "python.*(upgraded|core/|ml_pipeline/)" | grep -v grep | wc -l); \
		if [ $$FINAL_CHECK -gt 0 ]; then \
			echo "$(RED)‚ö†Ô∏è  SUPERVIVIENTES INMORTALES:$(NC)"; \
			ps aux | grep -E "python.*(upgraded|core/|ml_pipeline/)" | grep -v grep | sed 's/^/    /' || true; \
			echo "$(RED)Requiere intervenci√≥n manual con: sudo kill -9 <PID>$(NC)"; \
		else \
			echo "$(GREEN)‚úÖ Exterminaci√≥n completa - 0 supervivientes$(NC)"; \
		fi \
	else \
		echo "$(GREEN)‚ò¢Ô∏è  √âXITO TOTAL: 0 supervivientes$(NC)"; \
	fi

	@echo ""
	@echo "$(YELLOW)üîç Estado de puertos despu√©s de la purga:$(NC)"
	@for port in $(CAPTURE_PORT) $(GEOIP_PORT) $(ML_PORT) $(FIREWALL_PORT) $(DASHBOARD_WEB_PORT); do \
		if lsof -ti:$$port >/dev/null 2>&1; then \
			echo "  ‚ùå Puerto $$port A√öN OCUPADO"; \
		else \
			echo "  ‚úÖ Puerto $$port liberado"; \
		fi \
	done

	@echo ""
	@echo "$(GREEN)‚ò¢Ô∏è  PARADA NUCLEAR ULTRA COMPLETADA ‚ò¢Ô∏è$(NC)"
	@echo "$(GREEN)Sistema listo para reinicio limpio con 'make start'$(NC)"

restart: stop
	@sleep 3
	@$(MAKE) start

# =============================================================================
# MONITORIZACI√ìN (ACTUALIZADA)
# =============================================================================
status:
	@echo "$(CYAN)üìä Estado Sistema Post-Housekeeping$(NC)"
	@echo "$(CYAN)===================================$(NC)"
	@echo "$(YELLOW)üîß Componentes Core ($(CORE_DIR)/)$(NC)"
	@pgrep -f "$(FIREWALL_AGENT)" >/dev/null && echo "  üõ°Ô∏è  Firewall Agent: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  üõ°Ô∏è  Firewall Agent: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "promiscuous_agent" >/dev/null && echo "  üïµÔ∏è  Promiscuous Agent: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  üïµÔ∏è  Promiscuous Agent: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "$(GEOIP_ENRICHER)" >/dev/null && echo "  üåç GeoIP Enricher: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  üåç GeoIP Enricher: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "$(ML_DETECTOR)" >/dev/null && echo "  ü§ñ ML Detector Tricapa: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  ü§ñ ML Detector: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "$(DASHBOARD)" >/dev/null && echo "  üìä Dashboard: $(GREEN)‚úÖ Ejecut√°ndose$(NC) $(YELLOW)(http://localhost:$(DASHBOARD_WEB_PORT))$(NC)" || echo "  üìä Dashboard: $(RED)‚≠ï Detenido$(NC)"
	@echo ""
	@echo "$(YELLOW)üß† ML Pipeline ($(ML_PIPELINE_DIR)/)$(NC)"
	@pgrep -f "$(NEURAL_TRAINER)" >/dev/null && echo "  ü§ñ Neural Trainer: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  ü§ñ Neural Trainer: $(BLUE)üéØ Disponible$(NC)"
	@echo ""
	@echo "$(YELLOW)üíé Modelos & Datos:$(NC)"
	@if [ -d "$(MODELS_PRODUCTION_DIR)" ]; then \
		MODELS_COUNT=$(ls $(MODELS_PRODUCTION_DIR)/*.joblib 2>/dev/null | wc -l); \
		echo "  üß† Modelos producci√≥n: $MODELS_COUNT archivos"; \
	else \
		echo "  ‚ùå $(MODELS_PRODUCTION_DIR)/ no encontrado"; \
	fi
	@if [ -d "$(MODELS_ARCHIVE_DIR)" ]; then \
		ARCHIVE_COUNT=$(ls $(MODELS_ARCHIVE_DIR)/*.joblib 2>/dev/null | wc -l); \
		echo "  üì¶ Modelos archive: $ARCHIVE_COUNT archivos"; \
	else \
		echo "  ‚ùå $(MODELS_ARCHIVE_DIR)/ no encontrado"; \
	fi
	@echo ""
	@echo "$(YELLOW)üåê Web Assets:$(NC)"
	@if [ -d "$(WEB_STATIC_DIR)" ]; then echo "  ‚úÖ $(WEB_STATIC_DIR)/"; else echo "  ‚ùå $(WEB_STATIC_DIR)/ falta"; fi
	@if [ -d "$(WEB_TEMPLATES_DIR)" ]; then echo "  ‚úÖ $(WEB_TEMPLATES_DIR)/"; else echo "  ‚ùå $(WEB_TEMPLATES_DIR)/ falta"; fi
	@echo ""
	@echo "$(YELLOW)üîí Protocolos:$(NC)"
	@if [ -d "$(PROTOCOLS_DIR)/current" ]; then \
		PROTO_COUNT=$(ls $(PROTOCOLS_DIR)/current/*.proto 2>/dev/null | wc -l); \
		echo "  üîß Protobuf files: $PROTO_COUNT archivos"; \
		COMPILED_COUNT=$(ls $(PROTOCOLS_DIR)/current/*_pb2.py 2>/dev/null | wc -l); \
		echo "  ‚öôÔ∏è  Compilados: $COMPILED_COUNT archivos"; \
	else \
		echo "  ‚ùå $(PROTOCOLS_DIR)/current/ no encontrado"; \
	fi

monitor: status
	@echo ""
	@echo "$(YELLOW)üíπ Actividad Reciente Post-Housekeeping:$(NC)"
	@if [ -f $(FIREWALL_LOG) ]; then echo "üõ°Ô∏è  $(FIREWALL_AGENT):"; tail -3 $(FIREWALL_LOG) | sed 's/^/    /' | head -3; echo ""; fi
	@if [ -f $(GEOIP_LOG) ]; then echo "üåç $(GEOIP_ENRICHER):"; tail -3 $(GEOIP_LOG) | sed 's/^/    /' | head -3; echo ""; fi
	@if [ -f $(ML_LOG) ]; then echo "ü§ñ $(ML_DETECTOR):"; tail -3 $(ML_LOG) | sed 's/^/    /' | head -3; echo ""; fi
	@if [ -f $(DASHBOARD_LOG) ]; then echo "üìä $(DASHBOARD):"; tail -3 $(DASHBOARD_LOG) | sed 's/^/    /' | head -3; fi

logs:
	@echo "$(CYAN)üìã Logs del Sistema$(NC)"
	@echo "$(CYAN)====================$(NC)"
	@if [ -f $(FIREWALL_LOG) ]; then echo "$(YELLOW)=== üõ°Ô∏è  Firewall Agent ===$(NC)"; tail -10 $(FIREWALL_LOG); echo ""; fi
	@if [ -f $(PROMISCUOUS_LOG) ]; then echo "$(YELLOW)=== üïµÔ∏è  Promiscuous Agent ===$(NC)"; tail -10 $(PROMISCUOUS_LOG); echo ""; fi
	@if [ -f $(GEOIP_LOG) ]; then echo "$(YELLOW)=== üåç GeoIP Enricher ===$(NC)"; tail -10 $(GEOIP_LOG); echo ""; fi
	@if [ -f $(ML_LOG) ]; then echo "$(YELLOW)=== ü§ñ ML Detector ===$(NC)"; tail -10 $(ML_LOG); echo ""; fi
	@if [ -f $(DASHBOARD_LOG) ]; then echo "$(YELLOW)=== üìä Dashboard ===$(NC)"; tail -10 $(DASHBOARD_LOG); fi
	@if [ -f $(NEURAL_LOG) ]; then echo "$(YELLOW)=== ü§ñ Neural Trainer ===$(NC)"; tail -10 $(NEURAL_LOG); echo ""; fi

logs-tail:
	@echo "$(CYAN)üìã Siguiendo logs en tiempo real...$(NC)"
	@echo "$(YELLOW)Ctrl+C para salir$(NC)"
	@tail -f $(LOGS_DIR)/*.log 2>/dev/null | grep --line-buffered -E "(üìä|üì®|üì§|ERROR|WARNING|üî•|üåç|ü§ñ|üì°)" | while read line; do echo "[$(date '+%H:%M:%S')] $line"; done

logs-errors:
	@echo "$(CYAN)üö® Logs de Errores$(NC)"
	@echo "$(CYAN)==================$(NC)"
	@grep -i "error\|exception\|traceback\|failed" $(LOGS_DIR)/*.log 2>/dev/null | tail -20 | sed 's/^/  /' || echo "$(GREEN)‚úÖ No se encontraron errores recientes$(NC)"

show-dashboard:
	@echo "$(BLUE)üåê Abriendo dashboard web...$(NC)"
	@echo "$(YELLOW)URL: http://localhost:$(DASHBOARD_WEB_PORT)$(NC)"
	@which open >/dev/null && open http://localhost:$(DASHBOARD_WEB_PORT) || \
       which xdg-open >/dev/null && xdg-open http://localhost:$(DASHBOARD_WEB_PORT) || \
       echo "üí° Abrir manualmente: http://localhost:$(DASHBOARD_WEB_PORT)"

test:
	@echo "$(BLUE)üß™ Ejecutando tests...$(NC)"
	@if [ -d "tests" ]; then \
       $(ACTIVATE) && $(PYTHON_VENV) -m pytest tests/ -v; \
    else \
       echo "$(YELLOW)‚ö†Ô∏è  Directorio tests/ no encontrado$(NC)"; \
       echo "$(BLUE)üí° Creando estructura de tests b√°sica...$(NC)"; \
       mkdir -p tests; \
       echo "# Tests del Sistema Autoinmune" > tests/README.md; \
       echo "$(GREEN)‚úÖ Estructura creada en tests/$(NC)"; \
    fi

benchmark:
	@echo "$(BLUE)üìä Ejecutando benchmarks...$(NC)"
	@echo "$(YELLOW)Verificando rendimiento del sistema...$(NC)"
	@$(MAKE) status
	@echo ""
	@echo "$(YELLOW)Uso de CPU por proceso:$(NC)"
	@ps aux | grep -E "(python.*upgraded|python.*core/|python.*ml_pipeline/)" | grep -v grep | awk '{print "  " $11 ": " $3 "% CPU, " $4 "% MEM"}' || echo "  No hay procesos activos"
	@echo ""
	@echo "$(YELLOW)Uso de memoria:$(NC)"
	@free -h | sed 's/^/  /' 2>/dev/null || echo "  No disponible en macOS"
	@echo ""
	@echo "$(YELLOW)Conexiones de red activas:$(NC)"
	@netstat -tuln 2>/dev/null | grep -E ":($(CAPTURE_PORT)|$(GEOIP_PORT)|$(ML_PORT)|$(FIREWALL_PORT)|$(DASHBOARD_WEB_PORT))" | sed 's/^/  /' || echo "  No hay conexiones activas"

# =============================================================================
# MONITORIZACI√ìN (ACTUALIZADA)
# =============================================================================
status:
	@echo "$(CYAN)üìä Estado Sistema Post-Housekeeping$(NC)"
	@echo "$(CYAN)===================================$(NC)"
	@echo "$(YELLOW)üîß Componentes Core ($(CORE_DIR)/)$(NC)"
	@pgrep -f "$(FIREWALL_AGENT)" >/dev/null && echo "  üõ°Ô∏è  Firewall Agent: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  üõ°Ô∏è  Firewall Agent: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "promiscuous_agent" >/dev/null && echo "  üïµÔ∏è  Promiscuous Agent: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  üïµÔ∏è  Promiscuous Agent: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "$(GEOIP_ENRICHER)" >/dev/null && echo "  üåç GeoIP Enricher: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  üåç GeoIP Enricher: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "$(ML_DETECTOR)" >/dev/null && echo "  ü§ñ ML Detector Tricapa: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  ü§ñ ML Detector: $(RED)‚≠ï Detenido$(NC)"
	@pgrep -f "$(DASHBOARD)" >/dev/null && echo "  üìä Dashboard: $(GREEN)‚úÖ Ejecut√°ndose$(NC) $(YELLOW)(http://localhost:$(DASHBOARD_WEB_PORT))$(NC)" || echo "  üìä Dashboard: $(RED)‚≠ï Detenido$(NC)"
	@echo ""
	@echo "$(YELLOW)üß† ML Pipeline ($(ML_PIPELINE_DIR)/)$(NC)"
	@pgrep -f "$(NEURAL_TRAINER)" >/dev/null && echo "  ü§ñ Neural Trainer: $(GREEN)‚úÖ Ejecut√°ndose$(NC)" || echo "  ü§ñ Neural Trainer: $(BLUE)üéØ Disponible$(NC)"
	@echo ""
	@echo "$(YELLOW)üíé Modelos & Datos:$(NC)"
	@if [ -d "$(MODELS_PRODUCTION_DIR)" ]; then \
		MODELS_COUNT=$$(ls $(MODELS_PRODUCTION_DIR)/*.joblib 2>/dev/null | wc -l); \
		echo "  üß† Modelos producci√≥n: $$MODELS_COUNT archivos"; \
	else \
		echo "  ‚ùå $(MODELS_PRODUCTION_DIR)/ no encontrado"; \
	fi
	@if [ -d "$(MODELS_ARCHIVE_DIR)" ]; then \
		ARCHIVE_COUNT=$$(ls $(MODELS_ARCHIVE_DIR)/*.joblib 2>/dev/null | wc -l); \
		echo "  üì¶ Modelos archive: $$ARCHIVE_COUNT archivos"; \
	else \
		echo "  ‚ùå $(MODELS_ARCHIVE_DIR)/ no encontrado"; \
	fi
	@echo ""
	@echo "$(YELLOW)üåê Web Assets:$(NC)"
	@if [ -d "$(WEB_STATIC_DIR)" ]; then echo "  ‚úÖ $(WEB_STATIC_DIR)/"; else echo "  ‚ùå $(WEB_STATIC_DIR)/ falta"; fi
	@if [ -d "$(WEB_TEMPLATES_DIR)" ]; then echo "  ‚úÖ $(WEB_TEMPLATES_DIR)/"; else echo "  ‚ùå $(WEB_TEMPLATES_DIR)/ falta"; fi
	@echo ""
	@echo "$(YELLOW)üîí Protocolos:$(NC)"
	@if [ -d "$(PROTOCOLS_DIR)/current" ]; then \
		PROTO_COUNT=$$(ls $(PROTOCOLS_DIR)/current/*.proto 2>/dev/null | wc -l); \
		echo "  üîß Protobuf files: $$PROTO_COUNT archivos"; \
		COMPILED_COUNT=$$(ls $(PROTOCOLS_DIR)/current/*_pb2.py 2>/dev/null | wc -l); \
		echo "  ‚öôÔ∏è  Compilados: $$COMPILED_COUNT archivos"; \
	else \
		echo "  ‚ùå $(PROTOCOLS_DIR)/current/ no encontrado"; \
	fi

# El resto de comandos de monitorizaci√≥n, debug, etc. siguen el mismo patr√≥n...

monitor: status
	@echo ""
	@echo "$(YELLOW)üíπ Actividad Reciente Post-Housekeeping:$(NC)"
	@if [ -f $(FIREWALL_LOG) ]; then echo "üõ°Ô∏è  $(FIREWALL_AGENT):"; tail -3 $(FIREWALL_LOG) | sed 's/^/    /' | head -3; echo ""; fi
	@if [ -f $(GEOIP_LOG) ]; then echo "üåç $(GEOIP_ENRICHER):"; tail -3 $(GEOIP_LOG) | sed 's/^/    /' | head -3; echo ""; fi
	@if [ -f $(ML_LOG) ]; then echo "ü§ñ $(ML_DETECTOR):"; tail -3 $(ML_LOG) | sed 's/^/    /' | head -3; echo ""; fi
	@if [ -f $(DASHBOARD_LOG) ]; then echo "üìä $(DASHBOARD):"; tail -3 $(DASHBOARD_LOG) | sed 's/^/    /' | head -3; fi

# =============================================================================
# COMANDO R√ÅPIDO AUT√ìNOMO (ACTUALIZADO)
# =============================================================================
quick: setup install setup-perms verify-protobuf-compiled start show-dashboard
	@echo ""
	@echo "$(GREEN)üéâ QUICK START POST-HOUSEKEEPING COMPLETADO$(NC)"
	@echo "$(GREEN)==============================================$(NC)"
	@echo "$(YELLOW)Sistema Autoinmune Digital v2.0 POST-HOUSEKEEPING 100% operativo!$(NC)"
	@echo ""
	@echo "$(CYAN)üìä Dashboard: http://localhost:$(DASHBOARD_WEB_PORT)$(NC)"
	@echo "$(CYAN)üíé Modelos: $(MODELS_PRODUCTION_DIR)/ (auto-detectados)$(NC)"
	@echo "$(CYAN)üåê Web: $(WEB_STATIC_DIR)/ + $(WEB_TEMPLATES_DIR)/ (organizados)$(NC)"
	@echo "$(CYAN)üîí Protobuf: $(PROTOBUF_DIR)/ (auto-compilados)$(NC)"
	@echo "$(CYAN)üß† Pipeline: $(ML_PIPELINE_DIR)/ (listo)$(NC)"
	@echo "$(CYAN)üåç 329 sitios globales preservados$(NC)"
	@echo "$(CYAN)üíé fixed_service_sniffer.py (33KB √©pico)$(NC)"
	@echo ""
	@echo "$(CYAN)üîß Comandos √∫tiles:$(NC)"
	@echo "$(CYAN)  make status               - Estado sistema$(NC)"
	@echo "$(CYAN)  make show-housekeeping    - Ver resultado √©pico$(NC)"
	@echo "$(CYAN)  make show-epic-sniffer    - Ver joya h√≠brida$(NC)"
	@echo "$(CYAN)  make check-protobuf-imports - Verificar imports$(NC)"
	@echo "$(CYAN)  make logs                 - Ver logs$(NC)"
	@echo "$(CYAN)  make stop                 - Parar sistema$(NC)"
	@echo "$(CYAN)  make stop-nuclear         - Parar nuclear$(NC)"

# =============================================================================
# COMANDO R√ÅPIDO AUT√ìNOMO (ACTUALIZADO)
# =============================================================================
quick: setup install setup-perms verify-protobuf-compiled start show-dashboard
	@echo ""
	@echo "$(GREEN)üéâ QUICK START POST-HOUSEKEEPING COMPLETADO$(NC)"
	@echo "$(GREEN)==============================================$(NC)"
	@echo "$(YELLOW)Sistema Autoinmune Digital v2.0 POST-HOUSEKEEPING 100% operativo!$(NC)"
	@echo ""
	@echo "$(CYAN)üìä Dashboard: http://localhost:$(DASHBOARD_WEB_PORT)$(NC)"
	@echo "$(CYAN)üíé Modelos: $(MODELS_PRODUCTION_DIR)/ (auto-detectados)$(NC)"
	@echo "$(CYAN)üåê Web: $(WEB_STATIC_DIR)/ + $(WEB_TEMPLATES_DIR)/ (organizados)$(NC)"
	@echo "$(CYAN)üîí Protobuf: $(PROTOBUF_DIR)/ (auto-compilados)$(NC)"
	@echo "$(CYAN)üß† Pipeline: $(ML_PIPELINE_DIR)/ (listo)$(NC)"
	@echo "$(CYAN)üåç 329 sitios globales preservados$(NC)"
	@echo "$(CYAN)üíé fixed_service_sniffer.py (33KB √©pico)$(NC)"
	@echo ""
	@echo "$(CYAN)üîß Comandos √∫tiles:$(NC)"
	@echo "$(CYAN)  make status               - Estado sistema$(NC)"
	@echo "$(CYAN)  make show-housekeeping    - Ver resultado √©pico$(NC)"
	@echo "$(CYAN)  make show-epic-sniffer    - Ver joya h√≠brida$(NC)"
	@echo "$(CYAN)  make check-protobuf-imports - Verificar imports$(NC)"
	@echo "$(CYAN)  make logs                 - Ver logs$(NC)"
	@echo "$(CYAN)  make stop                 - Parar sistema$(NC)"
	@echo "$(CYAN)  make stop-nuclear         - Parar nuclear$(NC)"

# =============================================================================
# UTILIDADES DE VERIFICACI√ìN IMPORT (NUEVAS)
# =============================================================================
list-imports-to-fix:
	@echo "$(BLUE)üìã Lista de archivos core que pueden necesitar ajuste de imports...$(NC)"
	@echo "$(YELLOW)üîç Buscando imports protobuf en core/:$(NC)"
	@for file in core/*.py; do \
		if [ -f "$file" ] && grep -q "pb2\|protobuf" "$file" 2>/dev/null; then \
			echo "  üìÑ $file:"; \
			grep -n "import.*pb2\|from.*pb2\|protobuf" "$file" | sed 's/^/    /' || true; \
			echo ""; \
		fi \
	done
	@echo "$(YELLOW)üí° Para cada archivo listado arriba:$(NC)"
	@echo "  1. Cambiar imports a: from protocols.current import XXXX_pb2"
	@echo "  2. Verificar con: make check-protobuf-imports"
	@echo "  3. Test con: make start"

verify-system-ready:
	@echo "$(BLUE)üîç Verificaci√≥n completa del sistema POST-HOUSEKEEPING...$(NC)"
	@echo "$(CYAN)=========================================================$(NC)"
	@$(MAKE) check-structure
	@echo ""
	@$(MAKE) verify-protobuf-compiled
	@echo ""
	@$(MAKE) check-protobuf-imports
	@echo ""
	@$(MAKE) check-deps
	@echo ""
	@if [ -f "core/fixed_service_sniffer.py" ]; then \
		echo "$(GREEN)‚úÖ JOYA √âPICA CONFIRMADA: fixed_service_sniffer.py (33KB)$(NC)"; \
	else \
		echo "$(RED)‚ùå JOYA √âPICA PERDIDA: fixed_service_sniffer.py$(NC)"; \
	fi
	@echo ""
	@echo "$(YELLOW)üéØ RESULTADO:$(NC)"
	@echo "$(GREEN)  Sistema listo para arranque aut√≥nomo con 'make start'$(NC)"

# =============================================================================
# FUNCIONES DE DEBUG Y DESARROLLO (ACTUALIZADA)
# =============================================================================
debug:
	@echo "$(BLUE)üîß Modo Debug Post-Housekeeping$(NC)"
	@echo "$(BLUE)===============================$(NC)"
	@$(MAKE) check-structure
	@echo ""
	@$(MAKE) status
	@echo ""
	@$(MAKE) check-protobuf
	@echo ""
	@echo "$(YELLOW)Logs recientes:$(NC)"
	@$(MAKE) logs-errors

dev-start: verify-protobuf-compiled start-core
	@echo "$(PURPLE)üîß Modo desarrollo post-housekeeping activado$(NC)"
	@echo "$(PURPLE)Estructura: $(CORE_DIR)/ + $(ML_PIPELINE_DIR)/ + $(MODELS_PRODUCTION_DIR)/$(NC)"
	@echo "$(PURPLE)Dashboard: http://localhost:$(DASHBOARD_WEB_PORT)$(NC)"

show-epic-sniffer:
	@echo "$(CYAN)üíé JOYA √âPICA - fixed_service_sniffer.py$(NC)"
	@echo "$(CYAN)=======================================$(NC)"
	@echo ""
	@echo "$(GREEN)üåü EL SCRIPT QUE DEMUESTRA EL 90% DEL PROYECTO$(NC)"
	@echo ""
	@echo "$(YELLOW)üî¨ QU√â HACE:$(NC)"
	@echo "  üì° Captura tr√°fico con Scapy (como promiscuous_agent)"
	@echo "  üßÆ Extrae 20+ features de red (sin ZeroMQ)"
	@echo "  ü§ñ Los pasa directamente a modelos ML reentrenados"
	@echo "  üéØ Demuestra toda la metodolog√≠a en un solo script"
	@echo ""
	@echo "$(YELLOW)üí° POR QU√â ES √âPICO:$(NC)"
	@echo "  ‚ö° H√≠brido perfecto: Sniffer + ML Detector"
	@echo "  üîß Sin capas de complejidad (ZeroMQ/Protobuf)"
	@echo "  üíé Esencia pura del proyecto demostrada"
	@echo "  üöÄ Base para reescritura hacia Protobuf v3.1"
	@echo ""
	@if [ -f "$(FIXED_SERVICE_SNIFFER)" ]; then \
		echo "$(GREEN)‚úÖ Archivo encontrado: $(FIXED_SERVICE_SNIFFER)$(NC)"; \
		echo "$(YELLOW)üìä Estad√≠sticas:$(NC)"; \
		wc -l $(FIXED_SERVICE_SNIFFER) | awk '{print "  üìù L√≠neas: " $1}'; \
		grep -c "import" $(FIXED_SERVICE_SNIFFER) | awk '{print "  üì¶ Imports: " $1}'; \
		grep -c "def " $(FIXED_SERVICE_SNIFFER) | awk '{print "  üîß Funciones: " $1}'; \
	else \
		echo "$(RED)‚ùå Archivo no encontrado: $(FIXED_SERVICE_SNIFFER)$(NC)"; \
		echo "$(YELLOW)üí° Buscar en: core/ o archive/experimental/$(NC)"; \
	fi
	@echo ""
	@echo "$(PURPLE)üîÆ FUTURO - Protobuf v3.1:$(NC)"
	@echo "  üèóÔ∏è  Base para reescritura de componentes core"
	@echo "  üîí Integraci√≥n con protocolos seguros"
	@echo "  üåê Distribuci√≥n con ZeroMQ + cifrado"

# Resto de comandos permanecen similares pero actualizados para nueva estructura...