syntax = "proto3";

// ✅ PACKAGE PARA EVENTOS DE RED DISTRIBUIDOS
package network.events.distributed;

// Comando para generar código Python:
// protoc --python_out=. network_event_extended_v2.proto

message NetworkEvent {
    // 🔍 Identificación del evento
    string event_id = 1;
    int64 timestamp = 2;

    // 🌐 Información de red básica
    string source_ip = 3;
    string target_ip = 4;
    int32 packet_size = 5;
    int32 dest_port = 6;
    int32 src_port = 7;
    string protocol = 8;              // "tcp", "udp", "icmp", etc.

    // 🤖 Identificación del agente (legacy - mantener compatibilidad)
    string agent_id = 9;

    // 📊 Métricas y scoring
    float anomaly_score = 10;
    double latitude = 11;
    double longitude = 12;

    // 🎯 Clasificación de eventos
    string event_type = 13;           // "normal", "suspicious", "tor_detected", etc.
    float risk_score = 14;
    string description = 15;

    // 🖥️ Información del sistema operativo
    string so_identifier = 16;        // "linux_ufw", "linux_iptables", "windows_firewall", "darwin_pf"

    // 🏠 Información del nodo (handshake inicial)
    string node_hostname = 17;        // Hostname del nodo
    string os_version = 18;           // "Ubuntu 22.04", "Windows 11", etc.
    string firewall_status = 19;      // "active", "inactive", "unknown"
    string agent_version = 20;        // Versión del agente
    bool is_initial_handshake = 21;   // true solo en el primer evento del nodo

    // 🆔 NUEVOS CAMPOS DISTRIBUIDOS - CRÍTICOS PARA ETCD
    string node_id = 22;              // Identificador único asignado por etcd
    int32 process_id = 23;            // PID del proceso dentro del contenedor
    string container_id = 24;         // ID del contenedor (Docker/Podman) - opcional
    string cluster_name = 25;         // Nombre del cluster distribuido - opcional

    // 🔄 Estado del componente distribuido
    string component_status = 26;     // "healthy", "degraded", "initializing"
    int64 uptime_seconds = 27;        // Tiempo de vida del componente

    // 📈 Métricas de performance del nodo
    int32 queue_depth = 28;           // Profundidad de cola interna
    float cpu_usage_percent = 29;     // Uso de CPU del componente
    float memory_usage_mb = 30;       // Uso de memoria en MB

    // 🔧 Configuración dinámica
    string config_version = 31;       // Versión de configuración aplicada
    int64 config_timestamp = 32;      // Timestamp de última actualización de config

    // 🌍 Enriquecimiento GeoIP (para compatibilidad)
    bool geoip_enriched = 33;         // Indica si ha pasado por enriquecimiento GeoIP
    string enrichment_node = 34;      // node_id del nodo que enriqueció
    int64 enrichment_timestamp = 35;  // Timestamp del enriquecimiento

    // 🔧 PIDS DE COMPONENTES DISTRIBUIDOS - TRACKING DEL PIPELINE
    int32 promiscuous_pid = 36;       // PID del promiscuous_agent que capturó
    int32 geoip_enricher_pid = 37;    // PID del geoip_enricher que enriqueció
    int32 ml_detector_pid = 38;       // PID del ml_detector que analizó
    int32 dashboard_pid = 39;         // PID del dashboard que visualizó
    int32 firewall_pid = 40;          // PID del firewall que aplicó reglas

    // 📊 TIMESTAMPS DE PROCESAMIENTO POR COMPONENTE
    int64 promiscuous_timestamp = 41;     // Cuando fue capturado
    int64 geoip_enricher_timestamp = 42;  // Cuando fue enriquecido con GeoIP
    int64 ml_detector_timestamp = 43;     // Cuando fue analizado por ML
    int64 dashboard_timestamp = 44;       // Cuando fue mostrado en dashboard
    int64 firewall_timestamp = 45;        // Cuando fue procesado por firewall

    // 🎯 MÉTRICAS DE PIPELINE DISTRIBUIDO
    float processing_latency_ms = 46;     // Latencia total de procesamiento
    int32 pipeline_hops = 47;             // Número de saltos en el pipeline
    string pipeline_path = 48;            // Ruta del evento: "promiscuous->geoip->ml->dashboard"

    // 🔄 CONTROL DE FLUJO DISTRIBUIDO
    int32 retry_count = 49;               // Número de reintentos en el pipeline
    string last_error = 50;               // Último error encontrado
    bool requires_reprocessing = 51;      // Indica si necesita reprocesamiento

    // 🏷️ TAGS Y METADATOS DISTRIBUIDOS
    repeated string component_tags = 52;  // Tags añadidos por cada componente
    map<string, string> component_metadata = 53; // Metadata adicional por componente
}