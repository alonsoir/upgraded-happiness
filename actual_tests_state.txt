1) Hay que actualizar el Makefile con el script cleanup_analyzer.py
2) make stop no para toda la arquitectura
3) cuando levantas la arquitectura, no parece que arranque el colector de datos en tiempo real,
ni que esté actualizando el dashboard. Puede ser por problemas entre el cleanup y el asignar los puertos
correspondientes.
4) hay que actualizar el Makefile para que levante todo, pare todo correctamente, incluyendo troubleshooting necesario
5) hay que revisionar una vez esté todo estabilizado, arranque y parada limpios, el dashboard recibiendo los datos
en tiempo real, etc,..., hay que pensar en otro dashboard que sea mucho más útil.

Por ejemplo, un dashboard que muestre en un mapa geográfico los nodos agentes, ahora mismo en desarrollo, mostrarían
mi ciudad.
6) Hay que modificar el agente para que escuche asíncronamente las peticiones desde fuera, en mi caso, desde el dashboard,
porque ahí sé que ip está atacando a mi nodo. Lo que tiene que escuchar mi agente scapy asíncrono es una peticion
protobuf a través de un canal bireccional zeromq que hayamos establecido al inicializar la arquitectura.
El canal IN envía los eventos que el agente detecta, por ejemplo, tal ip externa está tratando de hacer algo a través
de tal puerto. La arquitectura envía asíncronamente el evento protobuf, se usa para entrenar el modelo, se
actualiza el modelo, dicho evento llega al dashboard, el operador lo ve, y decide actuar, enviando un evento de
vuelta a través del canal OUT al agente con la información necesaria para crear una regla en el firewall.
De esa manera, lo siguiente sería que el agente detecta que dicha ip trata de llegar al puerto de mi máquina, pero esta
vez el firewall lo está detectando. De esta manera me protejo, en el dashboard solo mostraría el último intento de entrada

7) Finalmente, con un dashboard basado en datos geográficos y con capacidad de enviar envios a cada uno de los
agentes para modificar el firewall, podemos pensar en como cifrar dicho tráfico, porque todo va a través del zeromq/protobuf.
supongo que sería susceptible de ser capturado mediante tcpdump/wireshark.

Hay que evitar que me lleguen eventos falsificados a la arquitectura.

8) finalmente, hay que empaquetar la arquitectura. El agente debe hacer exactamente su tarea, trabajar con colas zeroMQ,
enviar mensajes protobuff y trabajar con el firewall de su SO, con el que sea. El dashboard no tiene porque saber nada del
fw que habla con el agente, sus características, solo debe saber que quiere hacer con una ip del atacante a través
de un puerto. Nada más.

9) Necesito un mecanismo asíncrono de entrenamiento de modelos en función del tráfico que compartan los agentes,
de manera que así el dashboard puede beneficiarse de lo aprendido y entrenado a través de todos los nodos.
El proceso debe ser asíncrono, totalmente manual, debe hacerse en función de una puntuación calculada, y no
descarto que haya que volver atrás en algún momento. En principio, los modelos no se deben perder, a no ser que
aprendamos que se pueden borrar.