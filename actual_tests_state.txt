(upgraded_happiness_venv) ┌<▸> ~/g/upgraded-happiness
└➤ pytest tests/unit/test_protobuf_research_complete.py -v --asyncio-mode=auto
=================================================================================== test session starts ===================================================================================
platform darwin -- Python 3.13.4, pytest-8.4.1, pluggy-1.6.0 -- /Users/aironman/git/upgraded-happiness/upgraded_happiness_venv/bin/python3.13
cachedir: .pytest_cache
benchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /Users/aironman/git/upgraded-happiness
configfile: pytest.ini
plugins: xdist-3.7.0, anyio-4.9.0, cov-4.1.0, mock-3.14.1, Faker-19.13.0, benchmark-4.0.0, asyncio-1.0.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 4 items

tests/unit/test_protobuf_research_complete.py::test_imports PASSED                                                                                                                  [ 25%]
tests/unit/test_protobuf_research_complete.py::test_protobuf_serialization PASSED                                                                                                   [ 50%]
tests/unit/test_protobuf_research_complete.py::test_event_stream PASSED                                                                                                             [ 75%]
tests/unit/test_protobuf_research_complete.py::test_complete_benchmark PASSED                                                                                                       [100%]

==================================================================================== warnings summary =====================================================================================
tests/unit/test_protobuf_research_complete.py::test_imports
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.

tests/unit/test_protobuf_research_complete.py::test_imports
  <frozen importlib._bootstrap>:488: DeprecationWarning: Type google._upb._message.ScalarMapContainer uses PyType_Spec with a metaclass that has custom tp_new. This is deprecated and will no longer be allowed in Python 3.14.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
============================================================================== 4 passed, 2 warnings in 3.50s ==============================================================================
(upgraded_happiness_venv) ┌<▸> ~/g/upgraded-happiness
└➤

(upgraded_happiness_venv) ┌<▪> ~/g/upgraded-happiness
└➤ git branch
* feature/bitdefender-training
  main
(upgraded_happiness_venv) ┌<▸> ~/g/upgraded-happiness
└➤ ./scripts/run_broker.sh


Entorno virtual activado: /Users/aironman/git/upgraded-happiness/upgraded_happiness_venv
Iniciando broker ZeroMQ en puertos 5555 (frontend) y 5556 (backend)...
Broker ZeroMQ iniciado correctamente

En otra terminal,

(upgraded_happiness_venv) ┌<▸> ~/g/upgraded-happiness
└➤ python3 src/agents/agent_scapy.py
Traceback (most recent call last):
  File "/Users/aironman/git/upgraded-happiness/src/agents/agent_scapy.py", line 2, in <module>
    from src.protocols.protobuff import network_event_pb2  # Importación corregida
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ModuleNotFoundError: No module named 'src'


(upgraded_happiness_venv) ┌<▪> ~/g/upgraded-happiness
└➤ lsof -i :5555
(upgraded_happiness_venv) ┌<▪> ~/g/upgraded-happiness
└➤ sudo python quick_fix.py
Password:
⚡ SOLUCIÓN RÁPIDA PARA SISTEMA
==================================================
🧹 Liberando puertos...
✅ Puerto 5555 liberado
✅ Broker inteligente creado: scripts/smart_broker.py
🔧 Patcheando agent_scapy_fixed.py...
⚠️  agent_scapy_fixed.py ya está patcheado
🔧 Patcheando promiscuous_agent.py...
⚠️  promiscuous_agent.py ya está patcheado
🔧 Patcheando lightweight_ml_detector.py...
⚠️  lightweight_ml_detector.py ya está patcheado
✅ Orquestador actualizado para usar broker inteligente
🧪 Probando sistema...
🔌 Iniciando broker de prueba...
✅ Broker de prueba iniciado correctamente

🎉 SOLUCIÓN RÁPIDA COMPLETADA!

🚀 AHORA EJECUTA:
   python system_orchestrator.py start

💡 O para prueba individual:
   python scripts/smart_broker.py
(upgraded_happiness_venv) ┌<▸> ~/g/upgraded-happiness
└➤ sudo python system_orchestrator.py start
🎮 SISTEMA DE DETECCIÓN DE AMENAZAS - UPGRADED HAPPINESS
======================================================================
🎮 ORQUESTADOR DEL SISTEMA DE DETECCIÓN DE AMENAZAS
🕒 2025-06-27 12:18:33
======================================================================

🚀 INICIANDO SISTEMA EN MODO: DEVELOPMENT
==================================================
🚀 Iniciando broker...
✅ broker iniciado (PID: 15313)
🚀 Iniciando promiscuous_agent...
✅ promiscuous_agent iniciado (PID: 15325)
🚀 Iniciando lightweight_ml...
✅ lightweight_ml iniciado (PID: 15331)

🎉 SISTEMA INICIADO COMPLETAMENTE
✅ 3/3 componentes activos
✅ Sistema iniciado. Presiona Ctrl+C para detener...


Lunes.

Hay cosas que han funcionado, pero necesitamos limpiar, refactorizar, consolidar.

(upgraded_happiness_venv) ┌<▸> ~/g/upgraded-happiness
└➤ >....
        print(f"   Consolidar {recommendations['fix_scripts_to_consolidate']} scripts fix_*")
    else:
        print(f"   Enfocar en archivos esenciales para desarrollo")

    return recommendations

if __name__ == "__main__":
    main()
EOF

# Ejecutar analizador LIGERO
echo "🚀 Ejecutando analizador INTELIGENTE (no generará 77MB)..."
python smart_analyzer.py
🚀 Ejecutando analizador INTELIGENTE (no generará 77MB)...
🔍 Escaneo RÁPIDO del proyecto...

==================================================
📊 ANÁLISIS INTELIGENTE - UPGRADED HAPPINESS
==================================================

📈 RESUMEN:
   Total archivos Python: 48
   Scripts fix_*: 6
   Archivos backup: 0
   Archivos esenciales: 3
   Archivos grandes (>100KB): 0
   Tamaño total: 0.31 MB

🔧 SCRIPTS FIX DETECTADOS:
   📜 fix_original_scapy.py (2.5KB)
   📜 fix_patch_final.py (9.0KB)
   📜 fix_original_import.py (1.0KB)
   📜 fix_init_quick.py (1.2KB)
   📜 fix_protobuf_serializer.py (2.0KB)
   📜 fix_final_init.py (2.0KB)

🗑️  ARCHIVOS BACKUP DETECTADOS:
   0 archivos (0.0 MB)

⚡ ARCHIVOS ESENCIALES:
   ✅ system_orchestrator.py (14.1KB, 401 líneas)
   ✅ promiscuous_agent.py (16.7KB, 462 líneas)
   ✅ lightweight_ml_detector.py (19.0KB, 547 líneas)

🎯 RECOMENDACIONES INMEDIATAS:
   1. 🗑️  Eliminar backups: Liberar 0.0 MB
   2. 🔧 Consolidar 6 scripts fix_* en 1 módulo
   3. 📊 Enfocar en 3 archivos esenciales

==================================================

💡 SIGUIENTE PASO RECOMENDADO:
   Enfocar en archivos esenciales para desarrollo
(upgraded_happiness_venv) ┌<▸> ~/g/upgraded-happiness
└➤

(upgraded_happiness_venv) ┌<▸> ~/g/upgraded-happiness
└➤ echo ""
echo "<0001f9ea> PASO 2: Ejecutar tests"
cd tests_consolidated
python run_all_tests.py

echo ""
echo "📋 PASO 3: Revisar resultados"
echo "   - project_analysis.json: Análisis completo"

🧪 PASO 2: Ejecutar tests
🧪 INICIANDO SUITE DE TESTS - UPGRADED HAPPINESS
==================================================
test_bitdefender_processes_detected (test_bitdefender_integration.TestBitDefenderIntegration.test_bitdefender_processes_detected)
Verifica que se detectan procesos BitDefender ... ok
test_config_file_exists (test_bitdefender_integration.TestBitDefenderIntegration.test_config_file_exists)
Verifica archivo de configuración ... FAIL
test_dashboard_components (test_bitdefender_integration.TestBitDefenderIntegration.test_dashboard_components)
Verifica componentes del dashboard ... ok
test_integration_directory_exists (test_bitdefender_integration.TestBitDefenderIntegration.test_integration_directory_exists)
Verifica que el directorio de integración existe ... FAIL
test_ml_detector_exists (test_ml_detector.TestMLDetector.test_ml_detector_exists)
Verifica que el detector ML existe ... FAIL
test_ml_has_model_methods (test_ml_detector.TestMLDetector.test_ml_has_model_methods)
Verifica que tiene métodos de modelo ... ERROR
test_ml_syntax (test_ml_detector.TestMLDetector.test_ml_syntax)
Verifica sintaxis del detector ML ... FAIL
test_can_import_orchestrator (test_system_orchestrator.TestSystemOrchestrator.test_can_import_orchestrator)
Verifica que se puede importar el módulo ... FAIL
test_components_defined (test_system_orchestrator.TestSystemOrchestrator.test_components_defined)
Verifica que los componentes estén definidos ... ERROR
test_orchestrator_exists (test_system_orchestrator.TestSystemOrchestrator.test_orchestrator_exists)
Verifica que el orquestador existe ... FAIL
test_orchestrator_syntax (test_system_orchestrator.TestSystemOrchestrator.test_orchestrator_syntax)
Verifica sintaxis del orquestador ... FAIL

======================================================================
ERROR: test_ml_has_model_methods (test_ml_detector.TestMLDetector.test_ml_has_model_methods)
Verifica que tiene métodos de modelo
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/aironman/git/upgraded-happiness/tests_consolidated/test_ml_detector.py", line 24, in test_ml_has_model_methods
    with open(self.ml_path) as f:
         ~~~~^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'lightweight_ml_detector.py'

======================================================================
ERROR: test_components_defined (test_system_orchestrator.TestSystemOrchestrator.test_components_defined)
Verifica que los componentes estén definidos
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/aironman/git/upgraded-happiness/tests_consolidated/test_system_orchestrator.py", line 26, in test_components_defined
    with open(self.orchestrator_path) as f:
         ~~~~^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'system_orchestrator.py'

======================================================================
FAIL: test_config_file_exists (test_bitdefender_integration.TestBitDefenderIntegration.test_config_file_exists)
Verifica archivo de configuración
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/aironman/git/upgraded-happiness/tests_consolidated/test_bitdefender_integration.py", line 20, in test_config_file_exists
    self.assertTrue(config_file.exists())
    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
AssertionError: False is not true

======================================================================
FAIL: test_integration_directory_exists (test_bitdefender_integration.TestBitDefenderIntegration.test_integration_directory_exists)
Verifica que el directorio de integración existe
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/aironman/git/upgraded-happiness/tests_consolidated/test_bitdefender_integration.py", line 15, in test_integration_directory_exists
    self.assertTrue(self.bd_dir.exists())
    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
AssertionError: False is not true

======================================================================
FAIL: test_ml_detector_exists (test_ml_detector.TestMLDetector.test_ml_detector_exists)
Verifica que el detector ML existe
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/aironman/git/upgraded-happiness/tests_consolidated/test_ml_detector.py", line 14, in test_ml_detector_exists
    self.assertTrue(self.ml_path.exists())
    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: False is not true

======================================================================
FAIL: test_ml_syntax (test_ml_detector.TestMLDetector.test_ml_syntax)
Verifica sintaxis del detector ML
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/aironman/git/upgraded-happiness/tests_consolidated/test_ml_detector.py", line 20, in test_ml_syntax
    self.assertEqual(result.returncode, 0, f"Syntax error: {result.stderr}")
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 1 != 0 : Syntax error: b"[Errno 2] No such file or directory: 'lightweight_ml_detector.py'"

======================================================================
FAIL: test_can_import_orchestrator (test_system_orchestrator.TestSystemOrchestrator.test_can_import_orchestrator)
Verifica que se puede importar el módulo
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/aironman/git/upgraded-happiness/tests_consolidated/test_system_orchestrator.py", line 39, in test_can_import_orchestrator
    import system_orchestrator
ModuleNotFoundError: No module named 'system_orchestrator'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/aironman/git/upgraded-happiness/tests_consolidated/test_system_orchestrator.py", line 42, in test_can_import_orchestrator
    self.fail(f"Cannot import orchestrator: {e}")
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: Cannot import orchestrator: No module named 'system_orchestrator'

======================================================================
FAIL: test_orchestrator_exists (test_system_orchestrator.TestSystemOrchestrator.test_orchestrator_exists)
Verifica que el orquestador existe
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/aironman/git/upgraded-happiness/tests_consolidated/test_system_orchestrator.py", line 16, in test_orchestrator_exists
    self.assertTrue(self.orchestrator_path.exists())
    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: False is not true

======================================================================
FAIL: test_orchestrator_syntax (test_system_orchestrator.TestSystemOrchestrator.test_orchestrator_syntax)
Verifica sintaxis del orquestador
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/aironman/git/upgraded-happiness/tests_consolidated/test_system_orchestrator.py", line 22, in test_orchestrator_syntax
    self.assertEqual(result.returncode, 0, f"Syntax error: {result.stderr}")
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 1 != 0 : Syntax error: b"[Errno 2] No such file or directory: 'system_orchestrator.py'"

----------------------------------------------------------------------
Ran 11 tests in 0.200s

FAILED (failures=7, errors=2)

==================================================
📊 RESUMEN DE TESTS:
   Tests ejecutados: 11
   Fallos: 7
   Errores: 2

❌ FALLOS:
   - test_config_file_exists (test_bitdefender_integration.TestBitDefenderIntegration.test_config_file_exists): AssertionError: False is not true
   - test_integration_directory_exists (test_bitdefender_integration.TestBitDefenderIntegration.test_integration_directory_exists): AssertionError: False is not true
   - test_ml_detector_exists (test_ml_detector.TestMLDetector.test_ml_detector_exists): AssertionError: False is not true
   - test_ml_syntax (test_ml_detector.TestMLDetector.test_ml_syntax): AssertionError: 1 != 0 : Syntax error: b"[Errno 2] No such file or directory: 'lightweight_ml_detector.py'"
   - test_can_import_orchestrator (test_system_orchestrator.TestSystemOrchestrator.test_can_import_orchestrator): AssertionError: Cannot import orchestrator: No module named 'system_orchestrator'
   - test_orchestrator_exists (test_system_orchestrator.TestSystemOrchestrator.test_orchestrator_exists): AssertionError: False is not true
   - test_orchestrator_syntax (test_system_orchestrator.TestSystemOrchestrator.test_orchestrator_syntax): AssertionError: 1 != 0 : Syntax error: b"[Errno 2] No such file or directory: 'system_orchestrator.py'"

💥 ERRORES:
   - test_ml_has_model_methods (test_ml_detector.TestMLDetector.test_ml_has_model_methods): FileNotFoundError: [Errno 2] No such file or directory: 'lightweight_ml_detector.py'
   - test_components_defined (test_system_orchestrator.TestSystemOrchestrator.test_components_defined): FileNotFoundError: [Errno 2] No such file or directory: 'system_orchestrator.py'

⚠️  ALGUNOS TESTS FALLARON

📋 PASO 3: Revisar resultados
   - project_analysis.json: Análisis completo
(upgraded_happiness_venv) ┌<▸> ~/g/u/tests_consolidated
└➤



