#!/usr/bin/env python3
"""
Agente de captura promiscua total - Captura ABSOLUTAMENTE TODO
"""

import zmq
import sys
import os
import time
import json
import traceback
from collections import defaultdict, Counter
from scapy.all import (
    sniff,
    # Layer 2
    Ether, ARP,
    # Layer 3
    IP, IPv6, ICMP,
    # Layer 4
    TCP, UDP,
    # Application layers
    DNS, DHCP, Raw
)

# Importaciones opcionales
try:
    from scapy.layers.inet6 import ICMPv6

    HAS_ICMPV6 = True
except ImportError:
    HAS_ICMPV6 = False

try:
    from scapy.layers.http import HTTP

    HAS_HTTP = True
except ImportError:
    HAS_HTTP = False

try:
    from scapy.layers.tls.all import TLS

    HAS_TLS = True
except ImportError:
    HAS_TLS = False

try:
    from scapy.layers.dot11 import Dot11, Dot11Beacon

    HAS_WIRELESS = True
except ImportError:
    HAS_WIRELESS = False

sys.path.insert(0, os.getcwd())

try:
    from src.protocols.protobuf import network_event_pb2

    print("‚úÖ Protobuf importado exitosamente")
except ImportError as e:
    print(f"‚ùå Error importando protobuf: {e}")
    sys.exit(1)


class PromiscuousAgent:
    def __init__(self, broker_address="tcp://localhost:5555", interface="en0"):
        self.broker_address = broker_address
        self.interface = interface
        self.context = zmq.Context()
        self.socket = self.context.socket(zmq.PUB)

        # Configuraci√≥n de captura (ajustada seg√∫n disponibilidad)
        self.capture_config = {
            "ethernet": True,  # Frames Ethernet
            "arp": True,  # Address Resolution Protocol
            "ipv4": True,  # IPv4 traffic
            "ipv6": True,  # IPv6 traffic
            "icmp": True,  # ICMP/ICMPv6
            "tcp": True,  # TCP traffic
            "udp": True,  # UDP traffic
            "dns": True,  # DNS queries
            "dhcp": True,  # DHCP traffic
            "http": HAS_HTTP,  # HTTP traffic (if available)
            "tls": HAS_TLS,  # TLS/SSL traffic (if available)
            "wireless": HAS_WIRELESS,  # 802.11 if available
            "raw": True,  # Raw/unknown packets
            "promiscuous": True  # Modo promiscuo real
        }

        # Estad√≠sticas
        self.stats = {
            "total_packets": 0,
            "by_protocol": Counter(),
            "by_layer": Counter(),
            "by_direction": Counter(),
            "sent_events": 0,
            "errors": 0
        }

        self.start_time = time.time()

        print(f"üåê AGENTE PROMISCUO TOTAL")
        print(f"üì° Interfaz: {interface}")
        print(f"üîó Broker: {broker_address}")
        print("üéØ Capturando TODO el tr√°fico disponible")
        print("=" * 60)

        # Conectar al broker
        try:
            self.socket.connect(broker_address)
            print("‚úÖ Conectado al broker ZeroMQ")
        except Exception as e:
            print(f"‚ùå Error conectando: {e}")
            raise

    def analyze_packet_comprehensive(self, pkt):
        """An√°lisis comprehensivo de cualquier tipo de paquete"""
        try:
            self.stats["total_packets"] += 1

            # Crear evento base
            event = network_event_pb2.NetworkEvent()
            event.event_id = f"promiscuous_{int(time.time() * 1000000)}_{self.stats['total_packets']}"
            event.timestamp = int(time.time() * 1e9)
            event.agent_id = "promiscuous-agent"
            event.packet_size = len(pkt)

            # Variables para an√°lisis
            protocols = []
            src_ip = "unknown"
            dst_ip = "unknown"
            src_port = 0
            dst_port = 0

            # === AN√ÅLISIS POR CAPAS ===

            # CAPA 2 - Data Link
            if pkt.haslayer(Ether):
                protocols.append("Ethernet")
                self.stats["by_layer"]["L2_Ethernet"] += 1

                if self.capture_config["arp"] and pkt.haslayer(ARP):
                    protocols.append("ARP")
                    self.stats["by_protocol"]["ARP"] += 1
                    src_ip = pkt[ARP].psrc if hasattr(pkt[ARP], 'psrc') else "unknown"
                    dst_ip = pkt[ARP].pdst if hasattr(pkt[ARP], 'pdst') else "unknown"

            # 802.11 Wireless
            if self.capture_config["wireless"] and HAS_WIRELESS and pkt.haslayer(Dot11):
                protocols.append("802.11")
                self.stats["by_layer"]["L2_Wireless"] += 1
                if pkt.haslayer(Dot11Beacon):
                    protocols.append("Beacon")
                    self.stats["by_protocol"]["WiFi_Beacon"] += 1

            # CAPA 3 - Network
            if self.capture_config["ipv4"] and pkt.haslayer(IP):
                protocols.append("IPv4")
                self.stats["by_layer"]["L3_IPv4"] += 1
                src_ip = pkt[IP].src
                dst_ip = pkt[IP].dst

                # ICMP
                if self.capture_config["icmp"] and pkt.haslayer(ICMP):
                    protocols.append("ICMP")
                    self.stats["by_protocol"]["ICMP"] += 1

            elif self.capture_config["ipv6"] and pkt.haslayer(IPv6):
                protocols.append("IPv6")
                self.stats["by_layer"]["L3_IPv6"] += 1
                src_ip = pkt[IPv6].src
                dst_ip = pkt[IPv6].dst

                if self.capture_config["icmp"] and HAS_ICMPV6 and pkt.haslayer(ICMPv6):
                    protocols.append("ICMPv6")
                    self.stats["by_protocol"]["ICMPv6"] += 1

            # CAPA 4 - Transport
            if self.capture_config["tcp"] and pkt.haslayer(TCP):
                protocols.append("TCP")
                self.stats["by_layer"]["L4_TCP"] += 1
                src_port = pkt[TCP].sport
                dst_port = pkt[TCP].dport

                # An√°lisis de puertos TCP
                if dst_port == 80 or src_port == 80:
                    protocols.append("HTTP")
                    self.stats["by_protocol"]["HTTP"] += 1
                elif dst_port == 443 or src_port == 443:
                    protocols.append("HTTPS")
                    self.stats["by_protocol"]["HTTPS"] += 1
                elif dst_port == 22 or src_port == 22:
                    protocols.append("SSH")
                    self.stats["by_protocol"]["SSH"] += 1
                elif dst_port in [25, 587, 465] or src_port in [25, 587, 465]:
                    protocols.append("SMTP")
                    self.stats["by_protocol"]["SMTP"] += 1
                elif dst_port in [110, 995] or src_port in [110, 995]:
                    protocols.append("POP3")
                    self.stats["by_protocol"]["POP3"] += 1
                elif dst_port in [143, 993] or src_port in [143, 993]:
                    protocols.append("IMAP")
                    self.stats["by_protocol"]["IMAP"] += 1
                elif dst_port == 21 or src_port == 21:
                    protocols.append("FTP")
                    self.stats["by_protocol"]["FTP"] += 1
                elif dst_port in [8080, 8443, 8000] or src_port in [8080, 8443, 8000]:
                    protocols.append("HTTP-ALT")
                    self.stats["by_protocol"]["HTTP_ALT"] += 1

            elif self.capture_config["udp"] and pkt.haslayer(UDP):
                protocols.append("UDP")
                self.stats["by_layer"]["L4_UDP"] += 1
                src_port = pkt[UDP].sport
                dst_port = pkt[UDP].dport

                # An√°lisis de puertos UDP
                if dst_port == 53 or src_port == 53:
                    protocols.append("DNS")
                    self.stats["by_protocol"]["DNS"] += 1
                elif dst_port in [67, 68] or src_port in [67, 68]:
                    protocols.append("DHCP")
                    self.stats["by_protocol"]["DHCP"] += 1
                elif dst_port == 123 or src_port == 123:
                    protocols.append("NTP")
                    self.stats["by_protocol"]["NTP"] += 1
                elif dst_port == 161 or src_port == 161:
                    protocols.append("SNMP")
                    self.stats["by_protocol"]["SNMP"] += 1
                elif dst_port == 5353 or src_port == 5353:
                    protocols.append("mDNS")
                    self.stats["by_protocol"]["mDNS"] += 1
                elif dst_port == 1900 or src_port == 1900:
                    protocols.append("SSDP")
                    self.stats["by_protocol"]["SSDP"] += 1
                elif dst_port == 443 or src_port == 443:
                    protocols.append("QUIC")
                    self.stats["by_protocol"]["QUIC"] += 1

            # CAPAS SUPERIORES - Application
            if self.capture_config["dns"] and pkt.haslayer(DNS):
                protocols.append("DNS-Query")
                self.stats["by_protocol"]["DNS_Query"] += 1

            if self.capture_config["dhcp"] and pkt.haslayer(DHCP):
                protocols.append("DHCP-Packet")
                self.stats["by_protocol"]["DHCP_Packet"] += 1

            if self.capture_config["http"] and HAS_HTTP and pkt.haslayer(HTTP):
                protocols.append("HTTP-Data")
                self.stats["by_protocol"]["HTTP_Data"] += 1

            if self.capture_config["tls"] and HAS_TLS and pkt.haslayer(TLS):
                protocols.append("TLS")
                self.stats["by_protocol"]["TLS"] += 1

            # Datos RAW/desconocidos
            if self.capture_config["raw"] and pkt.haslayer(Raw):
                protocols.append("Raw-Data")
                self.stats["by_protocol"]["Raw"] += 1

            # Si no se detect√≥ ning√∫n protocolo conocido
            if not protocols:
                protocols.append("Unknown")
                self.stats["by_protocol"]["Unknown"] += 1

            # === COMPLETAR EVENTO ===
            event.source_ip = src_ip
            event.target_ip = dst_ip
            event.src_port = src_port
            event.dest_port = dst_port

            # A√±adir metadatos extra como JSON en un campo
            metadata = {
                "protocols": protocols,
                "direction": self._determine_direction(src_ip, dst_ip),
                "layers_detected": len([l for l in protocols if not l.endswith("-Data") and l != "Raw-Data"]),
                "interface": self.interface
            }

            # Guardar como string en un campo disponible (reutilizamos agent_id ampliado)
            event.agent_id = f"promiscuous-agent|{json.dumps(metadata)}"

            # === ENVIAR EVENTO ===
            try:
                self.socket.send(event.SerializeToString())
                self.stats["sent_events"] += 1

                # Log detallado para los primeros paquetes
                if self.stats["total_packets"] <= 20:
                    protocol_stack = " ‚Üí ".join(protocols)
                    print(
                        f"[{self.stats['total_packets']:3d}] {protocol_stack:<30} | {src_ip}:{src_port} ‚Üí {dst_ip}:{dst_port}")

                # Stats peri√≥dicas
                elif self.stats["sent_events"] % 200 == 0:
                    self._print_periodic_stats()

            except Exception as e:
                self.stats["errors"] += 1
                print(f"‚ùå Error enviando evento: {e}")

        except Exception as e:
            self.stats["errors"] += 1
            print(f"‚ùå Error analizando paquete: {e}")

    def _determine_direction(self, src_ip, dst_ip):
        """Determinar direcci√≥n del tr√°fico"""
        if src_ip == "unknown" or dst_ip == "unknown":
            return "unknown"

        # Rangos privados
        private_ranges = [
            "192.168.", "10.", "172.16.", "172.17.", "172.18.", "172.19.",
            "172.20.", "172.21.", "172.22.", "172.23.", "172.24.", "172.25.",
            "172.26.", "172.27.", "172.28.", "172.29.", "172.30.", "172.31."
        ]

        src_private = any(src_ip.startswith(r) for r in private_ranges)
        dst_private = any(dst_ip.startswith(r) for r in private_ranges)

        if src_private and not dst_private:
            return "outbound"
        elif not src_private and dst_private:
            return "inbound"
        elif src_private and dst_private:
            return "internal"
        else:
            return "external"

    def _print_periodic_stats(self):
        """Imprimir estad√≠sticas peri√≥dicas"""
        elapsed = time.time() - self.start_time
        rate = self.stats["sent_events"] / elapsed

        print(f"\nüìä STATS: {self.stats['sent_events']} eventos | {rate:.1f} evt/s | {elapsed:.1f}s")

        # Top 5 protocolos
        top_protocols = self.stats["by_protocol"].most_common(5)
        if top_protocols:
            print("üîù Top protocolos:", ", ".join([f"{p}({c})" for p, c in top_protocols]))

    def start_promiscuous_capture(self):
        """Iniciar captura promiscua"""
        print("üöÄ Iniciando captura PROMISCUA TOTAL...")
        print("üì° Capturando TODOS los protocolos disponibles")
        print("‚ö†Ô∏è  Ctrl+C para detener\n")

        try:
            # Sin filtros - capturar TODO
            sniff(
                iface=self.interface,
                prn=self.analyze_packet_comprehensive,
                store=0,  # No almacenar en memoria
                promisc=self.capture_config["promiscuous"],  # Modo promiscuo
                monitor=False  # No modo monitor (para WiFi)
            )

        except KeyboardInterrupt:
            print(f"\nüõë Captura detenida por usuario")
        except Exception as e:
            print(f"‚ùå Error durante captura: {e}")
            traceback.print_exc()
        finally:
            self.show_final_stats()
            self.cleanup()

    def show_final_stats(self):
        """Mostrar estad√≠sticas finales completas"""
        elapsed = time.time() - self.start_time

        print("\n" + "=" * 80)
        print("üìä ESTAD√çSTICAS FINALES - CAPTURA PROMISCUA")
        print("=" * 80)
        print(f"‚è±Ô∏è  Tiempo total: {elapsed:.1f} segundos")
        print(f"üì¶ Paquetes capturados: {self.stats['total_packets']:,}")
        print(f"üì§ Eventos enviados: {self.stats['sent_events']:,}")
        print(f"‚ùå Errores: {self.stats['errors']}")
        print(f"üöÄ Rate promedio: {self.stats['sent_events'] / elapsed:.1f} eventos/s")

        print(f"\nüîç PROTOCOLOS DETECTADOS:")
        print("-" * 50)
        for protocol, count in self.stats["by_protocol"].most_common(20):
            percentage = (count / self.stats["total_packets"]) * 100
            print(f"{protocol:<20} | {count:>8,} ({percentage:>5.1f}%)")

        print(f"\nüìö DISTRIBUCI√ìN POR CAPAS:")
        print("-" * 40)
        for layer, count in self.stats["by_layer"].most_common():
            percentage = (count / self.stats["total_packets"]) * 100
            print(f"{layer:<15} | {count:>8,} ({percentage:>5.1f}%)")

    def cleanup(self):
        """Limpiar recursos"""
        print("\nüßπ Cerrando conexiones...")
        self.socket.close()
        self.context.term()


def main():
    """Funci√≥n principal"""
    import argparse

    parser = argparse.ArgumentParser(description="Agente de captura promiscua total")
    parser.add_argument("-i", "--interface", default="en0", help="Interfaz de red")
    parser.add_argument("-b", "--broker", default="tcp://localhost:5555", help="Broker ZeroMQ")

    args = parser.parse_args()

    try:
        agent = PromiscuousAgent(args.broker, args.interface)
        agent.start_promiscuous_capture()

    except PermissionError:
        print("‚ùå Error de permisos. Ejecuta con sudo:")
        print(f"sudo python {sys.argv[0]} -i {args.interface}")
    except Exception as e:
        print(f"‚ùå Error: {e}")


if __name__ == "__main__":
    main()